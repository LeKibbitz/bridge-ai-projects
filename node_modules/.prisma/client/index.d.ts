
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Club
 * 
 */
export type Club = $Result.DefaultSelection<Prisma.$ClubPayload>
/**
 * Model Joueur
 * 
 */
export type Joueur = $Result.DefaultSelection<Prisma.$JoueurPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Function
 * 
 */
export type Function = $Result.DefaultSelection<Prisma.$FunctionPayload>
/**
 * Model Agrement
 * 
 */
export type Agrement = $Result.DefaultSelection<Prisma.$AgrementPayload>
/**
 * Model JoueurRole
 * 
 */
export type JoueurRole = $Result.DefaultSelection<Prisma.$JoueurRolePayload>
/**
 * Model JoueurFunction
 * 
 */
export type JoueurFunction = $Result.DefaultSelection<Prisma.$JoueurFunctionPayload>
/**
 * Model JoueurAgrement
 * 
 */
export type JoueurAgrement = $Result.DefaultSelection<Prisma.$JoueurAgrementPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clubs
 * const clubs = await prisma.club.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clubs
   * const clubs = await prisma.club.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.joueur`: Exposes CRUD operations for the **Joueur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Joueurs
    * const joueurs = await prisma.joueur.findMany()
    * ```
    */
  get joueur(): Prisma.JoueurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.function`: Exposes CRUD operations for the **Function** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Functions
    * const functions = await prisma.function.findMany()
    * ```
    */
  get function(): Prisma.FunctionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agrement`: Exposes CRUD operations for the **Agrement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agrements
    * const agrements = await prisma.agrement.findMany()
    * ```
    */
  get agrement(): Prisma.AgrementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.joueurRole`: Exposes CRUD operations for the **JoueurRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JoueurRoles
    * const joueurRoles = await prisma.joueurRole.findMany()
    * ```
    */
  get joueurRole(): Prisma.JoueurRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.joueurFunction`: Exposes CRUD operations for the **JoueurFunction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JoueurFunctions
    * const joueurFunctions = await prisma.joueurFunction.findMany()
    * ```
    */
  get joueurFunction(): Prisma.JoueurFunctionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.joueurAgrement`: Exposes CRUD operations for the **JoueurAgrement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JoueurAgrements
    * const joueurAgrements = await prisma.joueurAgrement.findMany()
    * ```
    */
  get joueurAgrement(): Prisma.JoueurAgrementDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Club: 'Club',
    Joueur: 'Joueur',
    Role: 'Role',
    Function: 'Function',
    Agrement: 'Agrement',
    JoueurRole: 'JoueurRole',
    JoueurFunction: 'JoueurFunction',
    JoueurAgrement: 'JoueurAgrement'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "club" | "joueur" | "role" | "function" | "agrement" | "joueurRole" | "joueurFunction" | "joueurAgrement"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Club: {
        payload: Prisma.$ClubPayload<ExtArgs>
        fields: Prisma.ClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findFirst: {
            args: Prisma.ClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findMany: {
            args: Prisma.ClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          create: {
            args: Prisma.ClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          createMany: {
            args: Prisma.ClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          delete: {
            args: Prisma.ClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          update: {
            args: Prisma.ClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          deleteMany: {
            args: Prisma.ClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClubUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          upsert: {
            args: Prisma.ClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          aggregate: {
            args: Prisma.ClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClub>
          }
          groupBy: {
            args: Prisma.ClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubCountArgs<ExtArgs>
            result: $Utils.Optional<ClubCountAggregateOutputType> | number
          }
        }
      }
      Joueur: {
        payload: Prisma.$JoueurPayload<ExtArgs>
        fields: Prisma.JoueurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoueurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoueurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          findFirst: {
            args: Prisma.JoueurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoueurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          findMany: {
            args: Prisma.JoueurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>[]
          }
          create: {
            args: Prisma.JoueurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          createMany: {
            args: Prisma.JoueurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoueurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>[]
          }
          delete: {
            args: Prisma.JoueurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          update: {
            args: Prisma.JoueurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          deleteMany: {
            args: Prisma.JoueurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JoueurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JoueurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>[]
          }
          upsert: {
            args: Prisma.JoueurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          aggregate: {
            args: Prisma.JoueurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJoueur>
          }
          groupBy: {
            args: Prisma.JoueurGroupByArgs<ExtArgs>
            result: $Utils.Optional<JoueurGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoueurCountArgs<ExtArgs>
            result: $Utils.Optional<JoueurCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Function: {
        payload: Prisma.$FunctionPayload<ExtArgs>
        fields: Prisma.FunctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FunctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FunctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>
          }
          findFirst: {
            args: Prisma.FunctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FunctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>
          }
          findMany: {
            args: Prisma.FunctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>[]
          }
          create: {
            args: Prisma.FunctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>
          }
          createMany: {
            args: Prisma.FunctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FunctionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>[]
          }
          delete: {
            args: Prisma.FunctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>
          }
          update: {
            args: Prisma.FunctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>
          }
          deleteMany: {
            args: Prisma.FunctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FunctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FunctionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>[]
          }
          upsert: {
            args: Prisma.FunctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunctionPayload>
          }
          aggregate: {
            args: Prisma.FunctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFunction>
          }
          groupBy: {
            args: Prisma.FunctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FunctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FunctionCountArgs<ExtArgs>
            result: $Utils.Optional<FunctionCountAggregateOutputType> | number
          }
        }
      }
      Agrement: {
        payload: Prisma.$AgrementPayload<ExtArgs>
        fields: Prisma.AgrementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgrementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgrementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>
          }
          findFirst: {
            args: Prisma.AgrementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgrementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>
          }
          findMany: {
            args: Prisma.AgrementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>[]
          }
          create: {
            args: Prisma.AgrementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>
          }
          createMany: {
            args: Prisma.AgrementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgrementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>[]
          }
          delete: {
            args: Prisma.AgrementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>
          }
          update: {
            args: Prisma.AgrementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>
          }
          deleteMany: {
            args: Prisma.AgrementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgrementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgrementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>[]
          }
          upsert: {
            args: Prisma.AgrementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgrementPayload>
          }
          aggregate: {
            args: Prisma.AgrementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgrement>
          }
          groupBy: {
            args: Prisma.AgrementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgrementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgrementCountArgs<ExtArgs>
            result: $Utils.Optional<AgrementCountAggregateOutputType> | number
          }
        }
      }
      JoueurRole: {
        payload: Prisma.$JoueurRolePayload<ExtArgs>
        fields: Prisma.JoueurRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoueurRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoueurRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>
          }
          findFirst: {
            args: Prisma.JoueurRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoueurRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>
          }
          findMany: {
            args: Prisma.JoueurRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>[]
          }
          create: {
            args: Prisma.JoueurRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>
          }
          createMany: {
            args: Prisma.JoueurRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoueurRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>[]
          }
          delete: {
            args: Prisma.JoueurRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>
          }
          update: {
            args: Prisma.JoueurRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>
          }
          deleteMany: {
            args: Prisma.JoueurRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JoueurRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JoueurRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>[]
          }
          upsert: {
            args: Prisma.JoueurRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurRolePayload>
          }
          aggregate: {
            args: Prisma.JoueurRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJoueurRole>
          }
          groupBy: {
            args: Prisma.JoueurRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<JoueurRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoueurRoleCountArgs<ExtArgs>
            result: $Utils.Optional<JoueurRoleCountAggregateOutputType> | number
          }
        }
      }
      JoueurFunction: {
        payload: Prisma.$JoueurFunctionPayload<ExtArgs>
        fields: Prisma.JoueurFunctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoueurFunctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoueurFunctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>
          }
          findFirst: {
            args: Prisma.JoueurFunctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoueurFunctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>
          }
          findMany: {
            args: Prisma.JoueurFunctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>[]
          }
          create: {
            args: Prisma.JoueurFunctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>
          }
          createMany: {
            args: Prisma.JoueurFunctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoueurFunctionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>[]
          }
          delete: {
            args: Prisma.JoueurFunctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>
          }
          update: {
            args: Prisma.JoueurFunctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>
          }
          deleteMany: {
            args: Prisma.JoueurFunctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JoueurFunctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JoueurFunctionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>[]
          }
          upsert: {
            args: Prisma.JoueurFunctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurFunctionPayload>
          }
          aggregate: {
            args: Prisma.JoueurFunctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJoueurFunction>
          }
          groupBy: {
            args: Prisma.JoueurFunctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<JoueurFunctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoueurFunctionCountArgs<ExtArgs>
            result: $Utils.Optional<JoueurFunctionCountAggregateOutputType> | number
          }
        }
      }
      JoueurAgrement: {
        payload: Prisma.$JoueurAgrementPayload<ExtArgs>
        fields: Prisma.JoueurAgrementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoueurAgrementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoueurAgrementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>
          }
          findFirst: {
            args: Prisma.JoueurAgrementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoueurAgrementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>
          }
          findMany: {
            args: Prisma.JoueurAgrementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>[]
          }
          create: {
            args: Prisma.JoueurAgrementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>
          }
          createMany: {
            args: Prisma.JoueurAgrementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoueurAgrementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>[]
          }
          delete: {
            args: Prisma.JoueurAgrementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>
          }
          update: {
            args: Prisma.JoueurAgrementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>
          }
          deleteMany: {
            args: Prisma.JoueurAgrementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JoueurAgrementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JoueurAgrementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>[]
          }
          upsert: {
            args: Prisma.JoueurAgrementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoueurAgrementPayload>
          }
          aggregate: {
            args: Prisma.JoueurAgrementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJoueurAgrement>
          }
          groupBy: {
            args: Prisma.JoueurAgrementGroupByArgs<ExtArgs>
            result: $Utils.Optional<JoueurAgrementGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoueurAgrementCountArgs<ExtArgs>
            result: $Utils.Optional<JoueurAgrementCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    club?: ClubOmit
    joueur?: JoueurOmit
    role?: RoleOmit
    function?: FunctionOmit
    agrement?: AgrementOmit
    joueurRole?: JoueurRoleOmit
    joueurFunction?: JoueurFunctionOmit
    joueurAgrement?: JoueurAgrementOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClubCountOutputType
   */

  export type ClubCountOutputType = {
    joueurs: number
  }

  export type ClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | ClubCountOutputTypeCountJoueursArgs
  }

  // Custom InputTypes
  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     */
    select?: ClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountJoueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurWhereInput
  }


  /**
   * Count Type JoueurCountOutputType
   */

  export type JoueurCountOutputType = {
    roles: number
    functions: number
    agrements: number
  }

  export type JoueurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | JoueurCountOutputTypeCountRolesArgs
    functions?: boolean | JoueurCountOutputTypeCountFunctionsArgs
    agrements?: boolean | JoueurCountOutputTypeCountAgrementsArgs
  }

  // Custom InputTypes
  /**
   * JoueurCountOutputType without action
   */
  export type JoueurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurCountOutputType
     */
    select?: JoueurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JoueurCountOutputType without action
   */
  export type JoueurCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurRoleWhereInput
  }

  /**
   * JoueurCountOutputType without action
   */
  export type JoueurCountOutputTypeCountFunctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurFunctionWhereInput
  }

  /**
   * JoueurCountOutputType without action
   */
  export type JoueurCountOutputTypeCountAgrementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurAgrementWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    joueurs: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | RoleCountOutputTypeCountJoueursArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountJoueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurRoleWhereInput
  }


  /**
   * Count Type FunctionCountOutputType
   */

  export type FunctionCountOutputType = {
    joueurs: number
  }

  export type FunctionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | FunctionCountOutputTypeCountJoueursArgs
  }

  // Custom InputTypes
  /**
   * FunctionCountOutputType without action
   */
  export type FunctionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunctionCountOutputType
     */
    select?: FunctionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FunctionCountOutputType without action
   */
  export type FunctionCountOutputTypeCountJoueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurFunctionWhereInput
  }


  /**
   * Count Type AgrementCountOutputType
   */

  export type AgrementCountOutputType = {
    joueurs: number
  }

  export type AgrementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | AgrementCountOutputTypeCountJoueursArgs
  }

  // Custom InputTypes
  /**
   * AgrementCountOutputType without action
   */
  export type AgrementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgrementCountOutputType
     */
    select?: AgrementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgrementCountOutputType without action
   */
  export type AgrementCountOutputTypeCountJoueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurAgrementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Club
   */

  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubAvgAggregateOutputType = {
    id: number | null
  }

  export type ClubSumAggregateOutputType = {
    id: number | null
  }

  export type ClubMinAggregateOutputType = {
    id: number | null
    nom: string | null
    code: string | null
    adresse: string | null
    telephone: string | null
    email: string | null
    site_web: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type ClubMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    code: string | null
    adresse: string | null
    telephone: string | null
    email: string | null
    site_web: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    nom: number
    code: number
    adresse: number
    telephone: number
    email: number
    site_web: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type ClubAvgAggregateInputType = {
    id?: true
  }

  export type ClubSumAggregateInputType = {
    id?: true
  }

  export type ClubMinAggregateInputType = {
    id?: true
    nom?: true
    code?: true
    adresse?: true
    telephone?: true
    email?: true
    site_web?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    nom?: true
    code?: true
    adresse?: true
    telephone?: true
    email?: true
    site_web?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    nom?: true
    code?: true
    adresse?: true
    telephone?: true
    email?: true
    site_web?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type ClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Club to aggregate.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClubAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClubSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithAggregationInput | ClubOrderByWithAggregationInput[]
    by: ClubScalarFieldEnum[] | ClubScalarFieldEnum
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _avg?: ClubAvgAggregateInputType
    _sum?: ClubSumAggregateInputType
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }

  export type ClubGroupByOutputType = {
    id: number
    nom: string
    code: string
    adresse: string | null
    telephone: string | null
    email: string | null
    site_web: string | null
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    code?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    site_web?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueurs?: boolean | Club$joueursArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    code?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    site_web?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["club"]>

  export type ClubSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    code?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    site_web?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["club"]>

  export type ClubSelectScalar = {
    id?: boolean
    nom?: boolean
    code?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    site_web?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type ClubOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "code" | "adresse" | "telephone" | "email" | "site_web" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["club"]>
  export type ClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | Club$joueursArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClubIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Club"
    objects: {
      joueurs: Prisma.$JoueurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      code: string
      adresse: string | null
      telephone: string | null
      email: string | null
      site_web: string | null
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["club"]>
    composites: {}
  }

  type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = $Result.GetResult<Prisma.$ClubPayload, S>

  type ClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClubCountAggregateInputType | true
    }

  export interface ClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubFindUniqueArgs>(args: SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Club that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubFindFirstArgs>(args?: SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Club that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubFindManyArgs>(args?: SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
     */
    create<T extends ClubCreateArgs>(args: SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clubs.
     * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubCreateManyArgs>(args?: SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clubs and returns the data saved in the database.
     * @param {ClubCreateManyAndReturnArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClubCreateManyAndReturnArgs>(args?: SelectSubset<T, ClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
     */
    delete<T extends ClubDeleteArgs>(args: SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubUpdateArgs>(args: SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubDeleteManyArgs>(args?: SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubUpdateManyArgs>(args: SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs and returns the data updated in the database.
     * @param {ClubUpdateManyAndReturnArgs} args - Arguments to update many Clubs.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClubUpdateManyAndReturnArgs>(args: SelectSubset<T, ClubUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
     */
    upsert<T extends ClubUpsertArgs>(args: SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Club model
   */
  readonly fields: ClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueurs<T extends Club$joueursArgs<ExtArgs> = {}>(args?: Subset<T, Club$joueursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Club model
   */
  interface ClubFieldRefs {
    readonly id: FieldRef<"Club", 'Int'>
    readonly nom: FieldRef<"Club", 'String'>
    readonly code: FieldRef<"Club", 'String'>
    readonly adresse: FieldRef<"Club", 'String'>
    readonly telephone: FieldRef<"Club", 'String'>
    readonly email: FieldRef<"Club", 'String'>
    readonly site_web: FieldRef<"Club", 'String'>
    readonly created_at: FieldRef<"Club", 'DateTime'>
    readonly updated_at: FieldRef<"Club", 'DateTime'>
    readonly created_by: FieldRef<"Club", 'String'>
    readonly updated_by: FieldRef<"Club", 'String'>
    readonly is_deleted: FieldRef<"Club", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Club findUnique
   */
  export type ClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findFirst
   */
  export type ClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findMany
   */
  export type ClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Clubs to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club create
   */
  export type ClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to create a Club.
     */
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }

  /**
   * Club createMany
   */
  export type ClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club createManyAndReturn
   */
  export type ClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club update
   */
  export type ClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to update a Club.
     */
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to update.
     */
    limit?: number
  }

  /**
   * Club updateManyAndReturn
   */
  export type ClubUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to update.
     */
    limit?: number
  }

  /**
   * Club upsert
   */
  export type ClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The filter to search for the Club to update in case it exists.
     */
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     */
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }

  /**
   * Club delete
   */
  export type ClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter which Club to delete.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clubs to delete
     */
    where?: ClubWhereInput
    /**
     * Limit how many Clubs to delete.
     */
    limit?: number
  }

  /**
   * Club.joueurs
   */
  export type Club$joueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    where?: JoueurWhereInput
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    cursor?: JoueurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Club without action
   */
  export type ClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Club
     */
    omit?: ClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
  }


  /**
   * Model Joueur
   */

  export type AggregateJoueur = {
    _count: JoueurCountAggregateOutputType | null
    _avg: JoueurAvgAggregateOutputType | null
    _sum: JoueurSumAggregateOutputType | null
    _min: JoueurMinAggregateOutputType | null
    _max: JoueurMaxAggregateOutputType | null
  }

  export type JoueurAvgAggregateOutputType = {
    id: number | null
    club_id: number | null
  }

  export type JoueurSumAggregateOutputType = {
    id: number | null
    club_id: number | null
  }

  export type JoueurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    licence: string | null
    email: string | null
    telephone: string | null
    date_naissance: Date | null
    club_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    licence: string | null
    email: string | null
    telephone: string | null
    date_naissance: Date | null
    club_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    licence: number
    email: number
    telephone: number
    date_naissance: number
    club_id: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type JoueurAvgAggregateInputType = {
    id?: true
    club_id?: true
  }

  export type JoueurSumAggregateInputType = {
    id?: true
    club_id?: true
  }

  export type JoueurMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    licence?: true
    email?: true
    telephone?: true
    date_naissance?: true
    club_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    licence?: true
    email?: true
    telephone?: true
    date_naissance?: true
    club_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    licence?: true
    email?: true
    telephone?: true
    date_naissance?: true
    club_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type JoueurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joueur to aggregate.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Joueurs
    **/
    _count?: true | JoueurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoueurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoueurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoueurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoueurMaxAggregateInputType
  }

  export type GetJoueurAggregateType<T extends JoueurAggregateArgs> = {
        [P in keyof T & keyof AggregateJoueur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoueur[P]>
      : GetScalarType<T[P], AggregateJoueur[P]>
  }




  export type JoueurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurWhereInput
    orderBy?: JoueurOrderByWithAggregationInput | JoueurOrderByWithAggregationInput[]
    by: JoueurScalarFieldEnum[] | JoueurScalarFieldEnum
    having?: JoueurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoueurCountAggregateInputType | true
    _avg?: JoueurAvgAggregateInputType
    _sum?: JoueurSumAggregateInputType
    _min?: JoueurMinAggregateInputType
    _max?: JoueurMaxAggregateInputType
  }

  export type JoueurGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    licence: string
    email: string | null
    telephone: string | null
    date_naissance: Date | null
    club_id: number
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: JoueurCountAggregateOutputType | null
    _avg: JoueurAvgAggregateOutputType | null
    _sum: JoueurSumAggregateOutputType | null
    _min: JoueurMinAggregateOutputType | null
    _max: JoueurMaxAggregateOutputType | null
  }

  type GetJoueurGroupByPayload<T extends JoueurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoueurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoueurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoueurGroupByOutputType[P]>
            : GetScalarType<T[P], JoueurGroupByOutputType[P]>
        }
      >
    >


  export type JoueurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    licence?: boolean
    email?: boolean
    telephone?: boolean
    date_naissance?: boolean
    club_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
    roles?: boolean | Joueur$rolesArgs<ExtArgs>
    functions?: boolean | Joueur$functionsArgs<ExtArgs>
    agrements?: boolean | Joueur$agrementsArgs<ExtArgs>
    _count?: boolean | JoueurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueur"]>

  export type JoueurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    licence?: boolean
    email?: boolean
    telephone?: boolean
    date_naissance?: boolean
    club_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueur"]>

  export type JoueurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    licence?: boolean
    email?: boolean
    telephone?: boolean
    date_naissance?: boolean
    club_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueur"]>

  export type JoueurSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    licence?: boolean
    email?: boolean
    telephone?: boolean
    date_naissance?: boolean
    club_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type JoueurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "prenom" | "licence" | "email" | "telephone" | "date_naissance" | "club_id" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["joueur"]>
  export type JoueurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
    roles?: boolean | Joueur$rolesArgs<ExtArgs>
    functions?: boolean | Joueur$functionsArgs<ExtArgs>
    agrements?: boolean | Joueur$agrementsArgs<ExtArgs>
    _count?: boolean | JoueurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JoueurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type JoueurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $JoueurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Joueur"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
      roles: Prisma.$JoueurRolePayload<ExtArgs>[]
      functions: Prisma.$JoueurFunctionPayload<ExtArgs>[]
      agrements: Prisma.$JoueurAgrementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      licence: string
      email: string | null
      telephone: string | null
      date_naissance: Date | null
      club_id: number
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["joueur"]>
    composites: {}
  }

  type JoueurGetPayload<S extends boolean | null | undefined | JoueurDefaultArgs> = $Result.GetResult<Prisma.$JoueurPayload, S>

  type JoueurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JoueurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JoueurCountAggregateInputType | true
    }

  export interface JoueurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Joueur'], meta: { name: 'Joueur' } }
    /**
     * Find zero or one Joueur that matches the filter.
     * @param {JoueurFindUniqueArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JoueurFindUniqueArgs>(args: SelectSubset<T, JoueurFindUniqueArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Joueur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JoueurFindUniqueOrThrowArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JoueurFindUniqueOrThrowArgs>(args: SelectSubset<T, JoueurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Joueur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFindFirstArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JoueurFindFirstArgs>(args?: SelectSubset<T, JoueurFindFirstArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Joueur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFindFirstOrThrowArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JoueurFindFirstOrThrowArgs>(args?: SelectSubset<T, JoueurFindFirstOrThrowArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Joueurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Joueurs
     * const joueurs = await prisma.joueur.findMany()
     * 
     * // Get first 10 Joueurs
     * const joueurs = await prisma.joueur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const joueurWithIdOnly = await prisma.joueur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JoueurFindManyArgs>(args?: SelectSubset<T, JoueurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Joueur.
     * @param {JoueurCreateArgs} args - Arguments to create a Joueur.
     * @example
     * // Create one Joueur
     * const Joueur = await prisma.joueur.create({
     *   data: {
     *     // ... data to create a Joueur
     *   }
     * })
     * 
     */
    create<T extends JoueurCreateArgs>(args: SelectSubset<T, JoueurCreateArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Joueurs.
     * @param {JoueurCreateManyArgs} args - Arguments to create many Joueurs.
     * @example
     * // Create many Joueurs
     * const joueur = await prisma.joueur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JoueurCreateManyArgs>(args?: SelectSubset<T, JoueurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Joueurs and returns the data saved in the database.
     * @param {JoueurCreateManyAndReturnArgs} args - Arguments to create many Joueurs.
     * @example
     * // Create many Joueurs
     * const joueur = await prisma.joueur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Joueurs and only return the `id`
     * const joueurWithIdOnly = await prisma.joueur.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JoueurCreateManyAndReturnArgs>(args?: SelectSubset<T, JoueurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Joueur.
     * @param {JoueurDeleteArgs} args - Arguments to delete one Joueur.
     * @example
     * // Delete one Joueur
     * const Joueur = await prisma.joueur.delete({
     *   where: {
     *     // ... filter to delete one Joueur
     *   }
     * })
     * 
     */
    delete<T extends JoueurDeleteArgs>(args: SelectSubset<T, JoueurDeleteArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Joueur.
     * @param {JoueurUpdateArgs} args - Arguments to update one Joueur.
     * @example
     * // Update one Joueur
     * const joueur = await prisma.joueur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JoueurUpdateArgs>(args: SelectSubset<T, JoueurUpdateArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Joueurs.
     * @param {JoueurDeleteManyArgs} args - Arguments to filter Joueurs to delete.
     * @example
     * // Delete a few Joueurs
     * const { count } = await prisma.joueur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JoueurDeleteManyArgs>(args?: SelectSubset<T, JoueurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Joueurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Joueurs
     * const joueur = await prisma.joueur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JoueurUpdateManyArgs>(args: SelectSubset<T, JoueurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Joueurs and returns the data updated in the database.
     * @param {JoueurUpdateManyAndReturnArgs} args - Arguments to update many Joueurs.
     * @example
     * // Update many Joueurs
     * const joueur = await prisma.joueur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Joueurs and only return the `id`
     * const joueurWithIdOnly = await prisma.joueur.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JoueurUpdateManyAndReturnArgs>(args: SelectSubset<T, JoueurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Joueur.
     * @param {JoueurUpsertArgs} args - Arguments to update or create a Joueur.
     * @example
     * // Update or create a Joueur
     * const joueur = await prisma.joueur.upsert({
     *   create: {
     *     // ... data to create a Joueur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Joueur we want to update
     *   }
     * })
     */
    upsert<T extends JoueurUpsertArgs>(args: SelectSubset<T, JoueurUpsertArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Joueurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurCountArgs} args - Arguments to filter Joueurs to count.
     * @example
     * // Count the number of Joueurs
     * const count = await prisma.joueur.count({
     *   where: {
     *     // ... the filter for the Joueurs we want to count
     *   }
     * })
    **/
    count<T extends JoueurCountArgs>(
      args?: Subset<T, JoueurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoueurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Joueur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoueurAggregateArgs>(args: Subset<T, JoueurAggregateArgs>): Prisma.PrismaPromise<GetJoueurAggregateType<T>>

    /**
     * Group by Joueur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoueurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoueurGroupByArgs['orderBy'] }
        : { orderBy?: JoueurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoueurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoueurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Joueur model
   */
  readonly fields: JoueurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Joueur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoueurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    roles<T extends Joueur$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Joueur$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    functions<T extends Joueur$functionsArgs<ExtArgs> = {}>(args?: Subset<T, Joueur$functionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    agrements<T extends Joueur$agrementsArgs<ExtArgs> = {}>(args?: Subset<T, Joueur$agrementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Joueur model
   */
  interface JoueurFieldRefs {
    readonly id: FieldRef<"Joueur", 'Int'>
    readonly nom: FieldRef<"Joueur", 'String'>
    readonly prenom: FieldRef<"Joueur", 'String'>
    readonly licence: FieldRef<"Joueur", 'String'>
    readonly email: FieldRef<"Joueur", 'String'>
    readonly telephone: FieldRef<"Joueur", 'String'>
    readonly date_naissance: FieldRef<"Joueur", 'DateTime'>
    readonly club_id: FieldRef<"Joueur", 'Int'>
    readonly created_at: FieldRef<"Joueur", 'DateTime'>
    readonly updated_at: FieldRef<"Joueur", 'DateTime'>
    readonly created_by: FieldRef<"Joueur", 'String'>
    readonly updated_by: FieldRef<"Joueur", 'String'>
    readonly is_deleted: FieldRef<"Joueur", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Joueur findUnique
   */
  export type JoueurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur findUniqueOrThrow
   */
  export type JoueurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur findFirst
   */
  export type JoueurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joueurs.
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joueurs.
     */
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Joueur findFirstOrThrow
   */
  export type JoueurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joueurs.
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joueurs.
     */
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Joueur findMany
   */
  export type JoueurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueurs to fetch.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Joueurs.
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Joueur create
   */
  export type JoueurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The data needed to create a Joueur.
     */
    data: XOR<JoueurCreateInput, JoueurUncheckedCreateInput>
  }

  /**
   * Joueur createMany
   */
  export type JoueurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Joueurs.
     */
    data: JoueurCreateManyInput | JoueurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Joueur createManyAndReturn
   */
  export type JoueurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * The data used to create many Joueurs.
     */
    data: JoueurCreateManyInput | JoueurCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Joueur update
   */
  export type JoueurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The data needed to update a Joueur.
     */
    data: XOR<JoueurUpdateInput, JoueurUncheckedUpdateInput>
    /**
     * Choose, which Joueur to update.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur updateMany
   */
  export type JoueurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Joueurs.
     */
    data: XOR<JoueurUpdateManyMutationInput, JoueurUncheckedUpdateManyInput>
    /**
     * Filter which Joueurs to update
     */
    where?: JoueurWhereInput
    /**
     * Limit how many Joueurs to update.
     */
    limit?: number
  }

  /**
   * Joueur updateManyAndReturn
   */
  export type JoueurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * The data used to update Joueurs.
     */
    data: XOR<JoueurUpdateManyMutationInput, JoueurUncheckedUpdateManyInput>
    /**
     * Filter which Joueurs to update
     */
    where?: JoueurWhereInput
    /**
     * Limit how many Joueurs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Joueur upsert
   */
  export type JoueurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The filter to search for the Joueur to update in case it exists.
     */
    where: JoueurWhereUniqueInput
    /**
     * In case the Joueur found by the `where` argument doesn't exist, create a new Joueur with this data.
     */
    create: XOR<JoueurCreateInput, JoueurUncheckedCreateInput>
    /**
     * In case the Joueur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoueurUpdateInput, JoueurUncheckedUpdateInput>
  }

  /**
   * Joueur delete
   */
  export type JoueurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter which Joueur to delete.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur deleteMany
   */
  export type JoueurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joueurs to delete
     */
    where?: JoueurWhereInput
    /**
     * Limit how many Joueurs to delete.
     */
    limit?: number
  }

  /**
   * Joueur.roles
   */
  export type Joueur$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    where?: JoueurRoleWhereInput
    orderBy?: JoueurRoleOrderByWithRelationInput | JoueurRoleOrderByWithRelationInput[]
    cursor?: JoueurRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurRoleScalarFieldEnum | JoueurRoleScalarFieldEnum[]
  }

  /**
   * Joueur.functions
   */
  export type Joueur$functionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    where?: JoueurFunctionWhereInput
    orderBy?: JoueurFunctionOrderByWithRelationInput | JoueurFunctionOrderByWithRelationInput[]
    cursor?: JoueurFunctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurFunctionScalarFieldEnum | JoueurFunctionScalarFieldEnum[]
  }

  /**
   * Joueur.agrements
   */
  export type Joueur$agrementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    where?: JoueurAgrementWhereInput
    orderBy?: JoueurAgrementOrderByWithRelationInput | JoueurAgrementOrderByWithRelationInput[]
    cursor?: JoueurAgrementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurAgrementScalarFieldEnum | JoueurAgrementScalarFieldEnum[]
  }

  /**
   * Joueur without action
   */
  export type JoueurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Joueur
     */
    omit?: JoueurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueurs?: boolean | Role$joueursArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "description" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | Role$joueursArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      joueurs: Prisma.$JoueurRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueurs<T extends Role$joueursArgs<ExtArgs> = {}>(args?: Subset<T, Role$joueursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly nom: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly created_at: FieldRef<"Role", 'DateTime'>
    readonly updated_at: FieldRef<"Role", 'DateTime'>
    readonly created_by: FieldRef<"Role", 'String'>
    readonly updated_by: FieldRef<"Role", 'String'>
    readonly is_deleted: FieldRef<"Role", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.joueurs
   */
  export type Role$joueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    where?: JoueurRoleWhereInput
    orderBy?: JoueurRoleOrderByWithRelationInput | JoueurRoleOrderByWithRelationInput[]
    cursor?: JoueurRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurRoleScalarFieldEnum | JoueurRoleScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Function
   */

  export type AggregateFunction = {
    _count: FunctionCountAggregateOutputType | null
    _avg: FunctionAvgAggregateOutputType | null
    _sum: FunctionSumAggregateOutputType | null
    _min: FunctionMinAggregateOutputType | null
    _max: FunctionMaxAggregateOutputType | null
  }

  export type FunctionAvgAggregateOutputType = {
    id: number | null
  }

  export type FunctionSumAggregateOutputType = {
    id: number | null
  }

  export type FunctionMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type FunctionMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type FunctionCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type FunctionAvgAggregateInputType = {
    id?: true
  }

  export type FunctionSumAggregateInputType = {
    id?: true
  }

  export type FunctionMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type FunctionMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type FunctionCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type FunctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Function to aggregate.
     */
    where?: FunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Functions to fetch.
     */
    orderBy?: FunctionOrderByWithRelationInput | FunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Functions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Functions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Functions
    **/
    _count?: true | FunctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FunctionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FunctionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FunctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FunctionMaxAggregateInputType
  }

  export type GetFunctionAggregateType<T extends FunctionAggregateArgs> = {
        [P in keyof T & keyof AggregateFunction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFunction[P]>
      : GetScalarType<T[P], AggregateFunction[P]>
  }




  export type FunctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FunctionWhereInput
    orderBy?: FunctionOrderByWithAggregationInput | FunctionOrderByWithAggregationInput[]
    by: FunctionScalarFieldEnum[] | FunctionScalarFieldEnum
    having?: FunctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FunctionCountAggregateInputType | true
    _avg?: FunctionAvgAggregateInputType
    _sum?: FunctionSumAggregateInputType
    _min?: FunctionMinAggregateInputType
    _max?: FunctionMaxAggregateInputType
  }

  export type FunctionGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: FunctionCountAggregateOutputType | null
    _avg: FunctionAvgAggregateOutputType | null
    _sum: FunctionSumAggregateOutputType | null
    _min: FunctionMinAggregateOutputType | null
    _max: FunctionMaxAggregateOutputType | null
  }

  type GetFunctionGroupByPayload<T extends FunctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FunctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FunctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FunctionGroupByOutputType[P]>
            : GetScalarType<T[P], FunctionGroupByOutputType[P]>
        }
      >
    >


  export type FunctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueurs?: boolean | Function$joueursArgs<ExtArgs>
    _count?: boolean | FunctionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["function"]>

  export type FunctionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["function"]>

  export type FunctionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["function"]>

  export type FunctionSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type FunctionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "description" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["function"]>
  export type FunctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | Function$joueursArgs<ExtArgs>
    _count?: boolean | FunctionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FunctionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FunctionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FunctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Function"
    objects: {
      joueurs: Prisma.$JoueurFunctionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["function"]>
    composites: {}
  }

  type FunctionGetPayload<S extends boolean | null | undefined | FunctionDefaultArgs> = $Result.GetResult<Prisma.$FunctionPayload, S>

  type FunctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FunctionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FunctionCountAggregateInputType | true
    }

  export interface FunctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Function'], meta: { name: 'Function' } }
    /**
     * Find zero or one Function that matches the filter.
     * @param {FunctionFindUniqueArgs} args - Arguments to find a Function
     * @example
     * // Get one Function
     * const function = await prisma.function.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FunctionFindUniqueArgs>(args: SelectSubset<T, FunctionFindUniqueArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Function that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FunctionFindUniqueOrThrowArgs} args - Arguments to find a Function
     * @example
     * // Get one Function
     * const function = await prisma.function.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FunctionFindUniqueOrThrowArgs>(args: SelectSubset<T, FunctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Function that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionFindFirstArgs} args - Arguments to find a Function
     * @example
     * // Get one Function
     * const function = await prisma.function.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FunctionFindFirstArgs>(args?: SelectSubset<T, FunctionFindFirstArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Function that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionFindFirstOrThrowArgs} args - Arguments to find a Function
     * @example
     * // Get one Function
     * const function = await prisma.function.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FunctionFindFirstOrThrowArgs>(args?: SelectSubset<T, FunctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Functions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Functions
     * const functions = await prisma.function.findMany()
     * 
     * // Get first 10 Functions
     * const functions = await prisma.function.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const functionWithIdOnly = await prisma.function.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FunctionFindManyArgs>(args?: SelectSubset<T, FunctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Function.
     * @param {FunctionCreateArgs} args - Arguments to create a Function.
     * @example
     * // Create one Function
     * const Function = await prisma.function.create({
     *   data: {
     *     // ... data to create a Function
     *   }
     * })
     * 
     */
    create<T extends FunctionCreateArgs>(args: SelectSubset<T, FunctionCreateArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Functions.
     * @param {FunctionCreateManyArgs} args - Arguments to create many Functions.
     * @example
     * // Create many Functions
     * const function = await prisma.function.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FunctionCreateManyArgs>(args?: SelectSubset<T, FunctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Functions and returns the data saved in the database.
     * @param {FunctionCreateManyAndReturnArgs} args - Arguments to create many Functions.
     * @example
     * // Create many Functions
     * const function = await prisma.function.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Functions and only return the `id`
     * const functionWithIdOnly = await prisma.function.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FunctionCreateManyAndReturnArgs>(args?: SelectSubset<T, FunctionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Function.
     * @param {FunctionDeleteArgs} args - Arguments to delete one Function.
     * @example
     * // Delete one Function
     * const Function = await prisma.function.delete({
     *   where: {
     *     // ... filter to delete one Function
     *   }
     * })
     * 
     */
    delete<T extends FunctionDeleteArgs>(args: SelectSubset<T, FunctionDeleteArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Function.
     * @param {FunctionUpdateArgs} args - Arguments to update one Function.
     * @example
     * // Update one Function
     * const function = await prisma.function.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FunctionUpdateArgs>(args: SelectSubset<T, FunctionUpdateArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Functions.
     * @param {FunctionDeleteManyArgs} args - Arguments to filter Functions to delete.
     * @example
     * // Delete a few Functions
     * const { count } = await prisma.function.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FunctionDeleteManyArgs>(args?: SelectSubset<T, FunctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Functions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Functions
     * const function = await prisma.function.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FunctionUpdateManyArgs>(args: SelectSubset<T, FunctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Functions and returns the data updated in the database.
     * @param {FunctionUpdateManyAndReturnArgs} args - Arguments to update many Functions.
     * @example
     * // Update many Functions
     * const function = await prisma.function.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Functions and only return the `id`
     * const functionWithIdOnly = await prisma.function.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FunctionUpdateManyAndReturnArgs>(args: SelectSubset<T, FunctionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Function.
     * @param {FunctionUpsertArgs} args - Arguments to update or create a Function.
     * @example
     * // Update or create a Function
     * const function = await prisma.function.upsert({
     *   create: {
     *     // ... data to create a Function
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Function we want to update
     *   }
     * })
     */
    upsert<T extends FunctionUpsertArgs>(args: SelectSubset<T, FunctionUpsertArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Functions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionCountArgs} args - Arguments to filter Functions to count.
     * @example
     * // Count the number of Functions
     * const count = await prisma.function.count({
     *   where: {
     *     // ... the filter for the Functions we want to count
     *   }
     * })
    **/
    count<T extends FunctionCountArgs>(
      args?: Subset<T, FunctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FunctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Function.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FunctionAggregateArgs>(args: Subset<T, FunctionAggregateArgs>): Prisma.PrismaPromise<GetFunctionAggregateType<T>>

    /**
     * Group by Function.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FunctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FunctionGroupByArgs['orderBy'] }
        : { orderBy?: FunctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FunctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFunctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Function model
   */
  readonly fields: FunctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Function.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FunctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueurs<T extends Function$joueursArgs<ExtArgs> = {}>(args?: Subset<T, Function$joueursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Function model
   */
  interface FunctionFieldRefs {
    readonly id: FieldRef<"Function", 'Int'>
    readonly nom: FieldRef<"Function", 'String'>
    readonly description: FieldRef<"Function", 'String'>
    readonly created_at: FieldRef<"Function", 'DateTime'>
    readonly updated_at: FieldRef<"Function", 'DateTime'>
    readonly created_by: FieldRef<"Function", 'String'>
    readonly updated_by: FieldRef<"Function", 'String'>
    readonly is_deleted: FieldRef<"Function", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Function findUnique
   */
  export type FunctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * Filter, which Function to fetch.
     */
    where: FunctionWhereUniqueInput
  }

  /**
   * Function findUniqueOrThrow
   */
  export type FunctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * Filter, which Function to fetch.
     */
    where: FunctionWhereUniqueInput
  }

  /**
   * Function findFirst
   */
  export type FunctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * Filter, which Function to fetch.
     */
    where?: FunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Functions to fetch.
     */
    orderBy?: FunctionOrderByWithRelationInput | FunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Functions.
     */
    cursor?: FunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Functions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Functions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Functions.
     */
    distinct?: FunctionScalarFieldEnum | FunctionScalarFieldEnum[]
  }

  /**
   * Function findFirstOrThrow
   */
  export type FunctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * Filter, which Function to fetch.
     */
    where?: FunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Functions to fetch.
     */
    orderBy?: FunctionOrderByWithRelationInput | FunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Functions.
     */
    cursor?: FunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Functions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Functions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Functions.
     */
    distinct?: FunctionScalarFieldEnum | FunctionScalarFieldEnum[]
  }

  /**
   * Function findMany
   */
  export type FunctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * Filter, which Functions to fetch.
     */
    where?: FunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Functions to fetch.
     */
    orderBy?: FunctionOrderByWithRelationInput | FunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Functions.
     */
    cursor?: FunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Functions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Functions.
     */
    skip?: number
    distinct?: FunctionScalarFieldEnum | FunctionScalarFieldEnum[]
  }

  /**
   * Function create
   */
  export type FunctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * The data needed to create a Function.
     */
    data: XOR<FunctionCreateInput, FunctionUncheckedCreateInput>
  }

  /**
   * Function createMany
   */
  export type FunctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Functions.
     */
    data: FunctionCreateManyInput | FunctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Function createManyAndReturn
   */
  export type FunctionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * The data used to create many Functions.
     */
    data: FunctionCreateManyInput | FunctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Function update
   */
  export type FunctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * The data needed to update a Function.
     */
    data: XOR<FunctionUpdateInput, FunctionUncheckedUpdateInput>
    /**
     * Choose, which Function to update.
     */
    where: FunctionWhereUniqueInput
  }

  /**
   * Function updateMany
   */
  export type FunctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Functions.
     */
    data: XOR<FunctionUpdateManyMutationInput, FunctionUncheckedUpdateManyInput>
    /**
     * Filter which Functions to update
     */
    where?: FunctionWhereInput
    /**
     * Limit how many Functions to update.
     */
    limit?: number
  }

  /**
   * Function updateManyAndReturn
   */
  export type FunctionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * The data used to update Functions.
     */
    data: XOR<FunctionUpdateManyMutationInput, FunctionUncheckedUpdateManyInput>
    /**
     * Filter which Functions to update
     */
    where?: FunctionWhereInput
    /**
     * Limit how many Functions to update.
     */
    limit?: number
  }

  /**
   * Function upsert
   */
  export type FunctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * The filter to search for the Function to update in case it exists.
     */
    where: FunctionWhereUniqueInput
    /**
     * In case the Function found by the `where` argument doesn't exist, create a new Function with this data.
     */
    create: XOR<FunctionCreateInput, FunctionUncheckedCreateInput>
    /**
     * In case the Function was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FunctionUpdateInput, FunctionUncheckedUpdateInput>
  }

  /**
   * Function delete
   */
  export type FunctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
    /**
     * Filter which Function to delete.
     */
    where: FunctionWhereUniqueInput
  }

  /**
   * Function deleteMany
   */
  export type FunctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Functions to delete
     */
    where?: FunctionWhereInput
    /**
     * Limit how many Functions to delete.
     */
    limit?: number
  }

  /**
   * Function.joueurs
   */
  export type Function$joueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    where?: JoueurFunctionWhereInput
    orderBy?: JoueurFunctionOrderByWithRelationInput | JoueurFunctionOrderByWithRelationInput[]
    cursor?: JoueurFunctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurFunctionScalarFieldEnum | JoueurFunctionScalarFieldEnum[]
  }

  /**
   * Function without action
   */
  export type FunctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Function
     */
    select?: FunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Function
     */
    omit?: FunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunctionInclude<ExtArgs> | null
  }


  /**
   * Model Agrement
   */

  export type AggregateAgrement = {
    _count: AgrementCountAggregateOutputType | null
    _avg: AgrementAvgAggregateOutputType | null
    _sum: AgrementSumAggregateOutputType | null
    _min: AgrementMinAggregateOutputType | null
    _max: AgrementMaxAggregateOutputType | null
  }

  export type AgrementAvgAggregateOutputType = {
    id: number | null
  }

  export type AgrementSumAggregateOutputType = {
    id: number | null
  }

  export type AgrementMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type AgrementMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type AgrementCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type AgrementAvgAggregateInputType = {
    id?: true
  }

  export type AgrementSumAggregateInputType = {
    id?: true
  }

  export type AgrementMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type AgrementMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type AgrementCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type AgrementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agrement to aggregate.
     */
    where?: AgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agrements to fetch.
     */
    orderBy?: AgrementOrderByWithRelationInput | AgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agrements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agrements
    **/
    _count?: true | AgrementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgrementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgrementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgrementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgrementMaxAggregateInputType
  }

  export type GetAgrementAggregateType<T extends AgrementAggregateArgs> = {
        [P in keyof T & keyof AggregateAgrement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgrement[P]>
      : GetScalarType<T[P], AggregateAgrement[P]>
  }




  export type AgrementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgrementWhereInput
    orderBy?: AgrementOrderByWithAggregationInput | AgrementOrderByWithAggregationInput[]
    by: AgrementScalarFieldEnum[] | AgrementScalarFieldEnum
    having?: AgrementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgrementCountAggregateInputType | true
    _avg?: AgrementAvgAggregateInputType
    _sum?: AgrementSumAggregateInputType
    _min?: AgrementMinAggregateInputType
    _max?: AgrementMaxAggregateInputType
  }

  export type AgrementGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: AgrementCountAggregateOutputType | null
    _avg: AgrementAvgAggregateOutputType | null
    _sum: AgrementSumAggregateOutputType | null
    _min: AgrementMinAggregateOutputType | null
    _max: AgrementMaxAggregateOutputType | null
  }

  type GetAgrementGroupByPayload<T extends AgrementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgrementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgrementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgrementGroupByOutputType[P]>
            : GetScalarType<T[P], AgrementGroupByOutputType[P]>
        }
      >
    >


  export type AgrementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueurs?: boolean | Agrement$joueursArgs<ExtArgs>
    _count?: boolean | AgrementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agrement"]>

  export type AgrementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["agrement"]>

  export type AgrementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }, ExtArgs["result"]["agrement"]>

  export type AgrementSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type AgrementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "description" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["agrement"]>
  export type AgrementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueurs?: boolean | Agrement$joueursArgs<ExtArgs>
    _count?: boolean | AgrementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgrementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AgrementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AgrementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agrement"
    objects: {
      joueurs: Prisma.$JoueurAgrementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["agrement"]>
    composites: {}
  }

  type AgrementGetPayload<S extends boolean | null | undefined | AgrementDefaultArgs> = $Result.GetResult<Prisma.$AgrementPayload, S>

  type AgrementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgrementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgrementCountAggregateInputType | true
    }

  export interface AgrementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agrement'], meta: { name: 'Agrement' } }
    /**
     * Find zero or one Agrement that matches the filter.
     * @param {AgrementFindUniqueArgs} args - Arguments to find a Agrement
     * @example
     * // Get one Agrement
     * const agrement = await prisma.agrement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgrementFindUniqueArgs>(args: SelectSubset<T, AgrementFindUniqueArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Agrement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgrementFindUniqueOrThrowArgs} args - Arguments to find a Agrement
     * @example
     * // Get one Agrement
     * const agrement = await prisma.agrement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgrementFindUniqueOrThrowArgs>(args: SelectSubset<T, AgrementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agrement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementFindFirstArgs} args - Arguments to find a Agrement
     * @example
     * // Get one Agrement
     * const agrement = await prisma.agrement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgrementFindFirstArgs>(args?: SelectSubset<T, AgrementFindFirstArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agrement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementFindFirstOrThrowArgs} args - Arguments to find a Agrement
     * @example
     * // Get one Agrement
     * const agrement = await prisma.agrement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgrementFindFirstOrThrowArgs>(args?: SelectSubset<T, AgrementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Agrements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agrements
     * const agrements = await prisma.agrement.findMany()
     * 
     * // Get first 10 Agrements
     * const agrements = await prisma.agrement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agrementWithIdOnly = await prisma.agrement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgrementFindManyArgs>(args?: SelectSubset<T, AgrementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Agrement.
     * @param {AgrementCreateArgs} args - Arguments to create a Agrement.
     * @example
     * // Create one Agrement
     * const Agrement = await prisma.agrement.create({
     *   data: {
     *     // ... data to create a Agrement
     *   }
     * })
     * 
     */
    create<T extends AgrementCreateArgs>(args: SelectSubset<T, AgrementCreateArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Agrements.
     * @param {AgrementCreateManyArgs} args - Arguments to create many Agrements.
     * @example
     * // Create many Agrements
     * const agrement = await prisma.agrement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgrementCreateManyArgs>(args?: SelectSubset<T, AgrementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agrements and returns the data saved in the database.
     * @param {AgrementCreateManyAndReturnArgs} args - Arguments to create many Agrements.
     * @example
     * // Create many Agrements
     * const agrement = await prisma.agrement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agrements and only return the `id`
     * const agrementWithIdOnly = await prisma.agrement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgrementCreateManyAndReturnArgs>(args?: SelectSubset<T, AgrementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Agrement.
     * @param {AgrementDeleteArgs} args - Arguments to delete one Agrement.
     * @example
     * // Delete one Agrement
     * const Agrement = await prisma.agrement.delete({
     *   where: {
     *     // ... filter to delete one Agrement
     *   }
     * })
     * 
     */
    delete<T extends AgrementDeleteArgs>(args: SelectSubset<T, AgrementDeleteArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Agrement.
     * @param {AgrementUpdateArgs} args - Arguments to update one Agrement.
     * @example
     * // Update one Agrement
     * const agrement = await prisma.agrement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgrementUpdateArgs>(args: SelectSubset<T, AgrementUpdateArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Agrements.
     * @param {AgrementDeleteManyArgs} args - Arguments to filter Agrements to delete.
     * @example
     * // Delete a few Agrements
     * const { count } = await prisma.agrement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgrementDeleteManyArgs>(args?: SelectSubset<T, AgrementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agrements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agrements
     * const agrement = await prisma.agrement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgrementUpdateManyArgs>(args: SelectSubset<T, AgrementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agrements and returns the data updated in the database.
     * @param {AgrementUpdateManyAndReturnArgs} args - Arguments to update many Agrements.
     * @example
     * // Update many Agrements
     * const agrement = await prisma.agrement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agrements and only return the `id`
     * const agrementWithIdOnly = await prisma.agrement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgrementUpdateManyAndReturnArgs>(args: SelectSubset<T, AgrementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Agrement.
     * @param {AgrementUpsertArgs} args - Arguments to update or create a Agrement.
     * @example
     * // Update or create a Agrement
     * const agrement = await prisma.agrement.upsert({
     *   create: {
     *     // ... data to create a Agrement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agrement we want to update
     *   }
     * })
     */
    upsert<T extends AgrementUpsertArgs>(args: SelectSubset<T, AgrementUpsertArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Agrements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementCountArgs} args - Arguments to filter Agrements to count.
     * @example
     * // Count the number of Agrements
     * const count = await prisma.agrement.count({
     *   where: {
     *     // ... the filter for the Agrements we want to count
     *   }
     * })
    **/
    count<T extends AgrementCountArgs>(
      args?: Subset<T, AgrementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgrementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agrement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgrementAggregateArgs>(args: Subset<T, AgrementAggregateArgs>): Prisma.PrismaPromise<GetAgrementAggregateType<T>>

    /**
     * Group by Agrement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgrementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgrementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgrementGroupByArgs['orderBy'] }
        : { orderBy?: AgrementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgrementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgrementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agrement model
   */
  readonly fields: AgrementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agrement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgrementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueurs<T extends Agrement$joueursArgs<ExtArgs> = {}>(args?: Subset<T, Agrement$joueursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agrement model
   */
  interface AgrementFieldRefs {
    readonly id: FieldRef<"Agrement", 'Int'>
    readonly nom: FieldRef<"Agrement", 'String'>
    readonly description: FieldRef<"Agrement", 'String'>
    readonly created_at: FieldRef<"Agrement", 'DateTime'>
    readonly updated_at: FieldRef<"Agrement", 'DateTime'>
    readonly created_by: FieldRef<"Agrement", 'String'>
    readonly updated_by: FieldRef<"Agrement", 'String'>
    readonly is_deleted: FieldRef<"Agrement", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Agrement findUnique
   */
  export type AgrementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * Filter, which Agrement to fetch.
     */
    where: AgrementWhereUniqueInput
  }

  /**
   * Agrement findUniqueOrThrow
   */
  export type AgrementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * Filter, which Agrement to fetch.
     */
    where: AgrementWhereUniqueInput
  }

  /**
   * Agrement findFirst
   */
  export type AgrementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * Filter, which Agrement to fetch.
     */
    where?: AgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agrements to fetch.
     */
    orderBy?: AgrementOrderByWithRelationInput | AgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agrements.
     */
    cursor?: AgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agrements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agrements.
     */
    distinct?: AgrementScalarFieldEnum | AgrementScalarFieldEnum[]
  }

  /**
   * Agrement findFirstOrThrow
   */
  export type AgrementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * Filter, which Agrement to fetch.
     */
    where?: AgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agrements to fetch.
     */
    orderBy?: AgrementOrderByWithRelationInput | AgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agrements.
     */
    cursor?: AgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agrements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agrements.
     */
    distinct?: AgrementScalarFieldEnum | AgrementScalarFieldEnum[]
  }

  /**
   * Agrement findMany
   */
  export type AgrementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * Filter, which Agrements to fetch.
     */
    where?: AgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agrements to fetch.
     */
    orderBy?: AgrementOrderByWithRelationInput | AgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agrements.
     */
    cursor?: AgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agrements.
     */
    skip?: number
    distinct?: AgrementScalarFieldEnum | AgrementScalarFieldEnum[]
  }

  /**
   * Agrement create
   */
  export type AgrementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * The data needed to create a Agrement.
     */
    data: XOR<AgrementCreateInput, AgrementUncheckedCreateInput>
  }

  /**
   * Agrement createMany
   */
  export type AgrementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agrements.
     */
    data: AgrementCreateManyInput | AgrementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agrement createManyAndReturn
   */
  export type AgrementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * The data used to create many Agrements.
     */
    data: AgrementCreateManyInput | AgrementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agrement update
   */
  export type AgrementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * The data needed to update a Agrement.
     */
    data: XOR<AgrementUpdateInput, AgrementUncheckedUpdateInput>
    /**
     * Choose, which Agrement to update.
     */
    where: AgrementWhereUniqueInput
  }

  /**
   * Agrement updateMany
   */
  export type AgrementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agrements.
     */
    data: XOR<AgrementUpdateManyMutationInput, AgrementUncheckedUpdateManyInput>
    /**
     * Filter which Agrements to update
     */
    where?: AgrementWhereInput
    /**
     * Limit how many Agrements to update.
     */
    limit?: number
  }

  /**
   * Agrement updateManyAndReturn
   */
  export type AgrementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * The data used to update Agrements.
     */
    data: XOR<AgrementUpdateManyMutationInput, AgrementUncheckedUpdateManyInput>
    /**
     * Filter which Agrements to update
     */
    where?: AgrementWhereInput
    /**
     * Limit how many Agrements to update.
     */
    limit?: number
  }

  /**
   * Agrement upsert
   */
  export type AgrementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * The filter to search for the Agrement to update in case it exists.
     */
    where: AgrementWhereUniqueInput
    /**
     * In case the Agrement found by the `where` argument doesn't exist, create a new Agrement with this data.
     */
    create: XOR<AgrementCreateInput, AgrementUncheckedCreateInput>
    /**
     * In case the Agrement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgrementUpdateInput, AgrementUncheckedUpdateInput>
  }

  /**
   * Agrement delete
   */
  export type AgrementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
    /**
     * Filter which Agrement to delete.
     */
    where: AgrementWhereUniqueInput
  }

  /**
   * Agrement deleteMany
   */
  export type AgrementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agrements to delete
     */
    where?: AgrementWhereInput
    /**
     * Limit how many Agrements to delete.
     */
    limit?: number
  }

  /**
   * Agrement.joueurs
   */
  export type Agrement$joueursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    where?: JoueurAgrementWhereInput
    orderBy?: JoueurAgrementOrderByWithRelationInput | JoueurAgrementOrderByWithRelationInput[]
    cursor?: JoueurAgrementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurAgrementScalarFieldEnum | JoueurAgrementScalarFieldEnum[]
  }

  /**
   * Agrement without action
   */
  export type AgrementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agrement
     */
    select?: AgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agrement
     */
    omit?: AgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgrementInclude<ExtArgs> | null
  }


  /**
   * Model JoueurRole
   */

  export type AggregateJoueurRole = {
    _count: JoueurRoleCountAggregateOutputType | null
    _avg: JoueurRoleAvgAggregateOutputType | null
    _sum: JoueurRoleSumAggregateOutputType | null
    _min: JoueurRoleMinAggregateOutputType | null
    _max: JoueurRoleMaxAggregateOutputType | null
  }

  export type JoueurRoleAvgAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    role_id: number | null
  }

  export type JoueurRoleSumAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    role_id: number | null
  }

  export type JoueurRoleMinAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    role_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurRoleMaxAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    role_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurRoleCountAggregateOutputType = {
    id: number
    joueur_id: number
    role_id: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type JoueurRoleAvgAggregateInputType = {
    id?: true
    joueur_id?: true
    role_id?: true
  }

  export type JoueurRoleSumAggregateInputType = {
    id?: true
    joueur_id?: true
    role_id?: true
  }

  export type JoueurRoleMinAggregateInputType = {
    id?: true
    joueur_id?: true
    role_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurRoleMaxAggregateInputType = {
    id?: true
    joueur_id?: true
    role_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurRoleCountAggregateInputType = {
    id?: true
    joueur_id?: true
    role_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type JoueurRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JoueurRole to aggregate.
     */
    where?: JoueurRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurRoles to fetch.
     */
    orderBy?: JoueurRoleOrderByWithRelationInput | JoueurRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoueurRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JoueurRoles
    **/
    _count?: true | JoueurRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoueurRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoueurRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoueurRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoueurRoleMaxAggregateInputType
  }

  export type GetJoueurRoleAggregateType<T extends JoueurRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateJoueurRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoueurRole[P]>
      : GetScalarType<T[P], AggregateJoueurRole[P]>
  }




  export type JoueurRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurRoleWhereInput
    orderBy?: JoueurRoleOrderByWithAggregationInput | JoueurRoleOrderByWithAggregationInput[]
    by: JoueurRoleScalarFieldEnum[] | JoueurRoleScalarFieldEnum
    having?: JoueurRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoueurRoleCountAggregateInputType | true
    _avg?: JoueurRoleAvgAggregateInputType
    _sum?: JoueurRoleSumAggregateInputType
    _min?: JoueurRoleMinAggregateInputType
    _max?: JoueurRoleMaxAggregateInputType
  }

  export type JoueurRoleGroupByOutputType = {
    id: number
    joueur_id: number
    role_id: number
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: JoueurRoleCountAggregateOutputType | null
    _avg: JoueurRoleAvgAggregateOutputType | null
    _sum: JoueurRoleSumAggregateOutputType | null
    _min: JoueurRoleMinAggregateOutputType | null
    _max: JoueurRoleMaxAggregateOutputType | null
  }

  type GetJoueurRoleGroupByPayload<T extends JoueurRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoueurRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoueurRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoueurRoleGroupByOutputType[P]>
            : GetScalarType<T[P], JoueurRoleGroupByOutputType[P]>
        }
      >
    >


  export type JoueurRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    role_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurRole"]>

  export type JoueurRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    role_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurRole"]>

  export type JoueurRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    role_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurRole"]>

  export type JoueurRoleSelectScalar = {
    id?: boolean
    joueur_id?: boolean
    role_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type JoueurRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "joueur_id" | "role_id" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["joueurRole"]>
  export type JoueurRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type JoueurRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type JoueurRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $JoueurRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JoueurRole"
    objects: {
      joueur: Prisma.$JoueurPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      joueur_id: number
      role_id: number
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["joueurRole"]>
    composites: {}
  }

  type JoueurRoleGetPayload<S extends boolean | null | undefined | JoueurRoleDefaultArgs> = $Result.GetResult<Prisma.$JoueurRolePayload, S>

  type JoueurRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JoueurRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JoueurRoleCountAggregateInputType | true
    }

  export interface JoueurRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JoueurRole'], meta: { name: 'JoueurRole' } }
    /**
     * Find zero or one JoueurRole that matches the filter.
     * @param {JoueurRoleFindUniqueArgs} args - Arguments to find a JoueurRole
     * @example
     * // Get one JoueurRole
     * const joueurRole = await prisma.joueurRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JoueurRoleFindUniqueArgs>(args: SelectSubset<T, JoueurRoleFindUniqueArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JoueurRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JoueurRoleFindUniqueOrThrowArgs} args - Arguments to find a JoueurRole
     * @example
     * // Get one JoueurRole
     * const joueurRole = await prisma.joueurRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JoueurRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, JoueurRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JoueurRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleFindFirstArgs} args - Arguments to find a JoueurRole
     * @example
     * // Get one JoueurRole
     * const joueurRole = await prisma.joueurRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JoueurRoleFindFirstArgs>(args?: SelectSubset<T, JoueurRoleFindFirstArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JoueurRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleFindFirstOrThrowArgs} args - Arguments to find a JoueurRole
     * @example
     * // Get one JoueurRole
     * const joueurRole = await prisma.joueurRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JoueurRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, JoueurRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JoueurRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JoueurRoles
     * const joueurRoles = await prisma.joueurRole.findMany()
     * 
     * // Get first 10 JoueurRoles
     * const joueurRoles = await prisma.joueurRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const joueurRoleWithIdOnly = await prisma.joueurRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JoueurRoleFindManyArgs>(args?: SelectSubset<T, JoueurRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JoueurRole.
     * @param {JoueurRoleCreateArgs} args - Arguments to create a JoueurRole.
     * @example
     * // Create one JoueurRole
     * const JoueurRole = await prisma.joueurRole.create({
     *   data: {
     *     // ... data to create a JoueurRole
     *   }
     * })
     * 
     */
    create<T extends JoueurRoleCreateArgs>(args: SelectSubset<T, JoueurRoleCreateArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JoueurRoles.
     * @param {JoueurRoleCreateManyArgs} args - Arguments to create many JoueurRoles.
     * @example
     * // Create many JoueurRoles
     * const joueurRole = await prisma.joueurRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JoueurRoleCreateManyArgs>(args?: SelectSubset<T, JoueurRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JoueurRoles and returns the data saved in the database.
     * @param {JoueurRoleCreateManyAndReturnArgs} args - Arguments to create many JoueurRoles.
     * @example
     * // Create many JoueurRoles
     * const joueurRole = await prisma.joueurRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JoueurRoles and only return the `id`
     * const joueurRoleWithIdOnly = await prisma.joueurRole.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JoueurRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, JoueurRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JoueurRole.
     * @param {JoueurRoleDeleteArgs} args - Arguments to delete one JoueurRole.
     * @example
     * // Delete one JoueurRole
     * const JoueurRole = await prisma.joueurRole.delete({
     *   where: {
     *     // ... filter to delete one JoueurRole
     *   }
     * })
     * 
     */
    delete<T extends JoueurRoleDeleteArgs>(args: SelectSubset<T, JoueurRoleDeleteArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JoueurRole.
     * @param {JoueurRoleUpdateArgs} args - Arguments to update one JoueurRole.
     * @example
     * // Update one JoueurRole
     * const joueurRole = await prisma.joueurRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JoueurRoleUpdateArgs>(args: SelectSubset<T, JoueurRoleUpdateArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JoueurRoles.
     * @param {JoueurRoleDeleteManyArgs} args - Arguments to filter JoueurRoles to delete.
     * @example
     * // Delete a few JoueurRoles
     * const { count } = await prisma.joueurRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JoueurRoleDeleteManyArgs>(args?: SelectSubset<T, JoueurRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JoueurRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JoueurRoles
     * const joueurRole = await prisma.joueurRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JoueurRoleUpdateManyArgs>(args: SelectSubset<T, JoueurRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JoueurRoles and returns the data updated in the database.
     * @param {JoueurRoleUpdateManyAndReturnArgs} args - Arguments to update many JoueurRoles.
     * @example
     * // Update many JoueurRoles
     * const joueurRole = await prisma.joueurRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JoueurRoles and only return the `id`
     * const joueurRoleWithIdOnly = await prisma.joueurRole.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JoueurRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, JoueurRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JoueurRole.
     * @param {JoueurRoleUpsertArgs} args - Arguments to update or create a JoueurRole.
     * @example
     * // Update or create a JoueurRole
     * const joueurRole = await prisma.joueurRole.upsert({
     *   create: {
     *     // ... data to create a JoueurRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JoueurRole we want to update
     *   }
     * })
     */
    upsert<T extends JoueurRoleUpsertArgs>(args: SelectSubset<T, JoueurRoleUpsertArgs<ExtArgs>>): Prisma__JoueurRoleClient<$Result.GetResult<Prisma.$JoueurRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JoueurRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleCountArgs} args - Arguments to filter JoueurRoles to count.
     * @example
     * // Count the number of JoueurRoles
     * const count = await prisma.joueurRole.count({
     *   where: {
     *     // ... the filter for the JoueurRoles we want to count
     *   }
     * })
    **/
    count<T extends JoueurRoleCountArgs>(
      args?: Subset<T, JoueurRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoueurRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JoueurRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoueurRoleAggregateArgs>(args: Subset<T, JoueurRoleAggregateArgs>): Prisma.PrismaPromise<GetJoueurRoleAggregateType<T>>

    /**
     * Group by JoueurRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoueurRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoueurRoleGroupByArgs['orderBy'] }
        : { orderBy?: JoueurRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoueurRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoueurRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JoueurRole model
   */
  readonly fields: JoueurRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JoueurRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoueurRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueur<T extends JoueurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JoueurDefaultArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JoueurRole model
   */
  interface JoueurRoleFieldRefs {
    readonly id: FieldRef<"JoueurRole", 'Int'>
    readonly joueur_id: FieldRef<"JoueurRole", 'Int'>
    readonly role_id: FieldRef<"JoueurRole", 'Int'>
    readonly created_at: FieldRef<"JoueurRole", 'DateTime'>
    readonly updated_at: FieldRef<"JoueurRole", 'DateTime'>
    readonly created_by: FieldRef<"JoueurRole", 'String'>
    readonly updated_by: FieldRef<"JoueurRole", 'String'>
    readonly is_deleted: FieldRef<"JoueurRole", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * JoueurRole findUnique
   */
  export type JoueurRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * Filter, which JoueurRole to fetch.
     */
    where: JoueurRoleWhereUniqueInput
  }

  /**
   * JoueurRole findUniqueOrThrow
   */
  export type JoueurRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * Filter, which JoueurRole to fetch.
     */
    where: JoueurRoleWhereUniqueInput
  }

  /**
   * JoueurRole findFirst
   */
  export type JoueurRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * Filter, which JoueurRole to fetch.
     */
    where?: JoueurRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurRoles to fetch.
     */
    orderBy?: JoueurRoleOrderByWithRelationInput | JoueurRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JoueurRoles.
     */
    cursor?: JoueurRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JoueurRoles.
     */
    distinct?: JoueurRoleScalarFieldEnum | JoueurRoleScalarFieldEnum[]
  }

  /**
   * JoueurRole findFirstOrThrow
   */
  export type JoueurRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * Filter, which JoueurRole to fetch.
     */
    where?: JoueurRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurRoles to fetch.
     */
    orderBy?: JoueurRoleOrderByWithRelationInput | JoueurRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JoueurRoles.
     */
    cursor?: JoueurRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JoueurRoles.
     */
    distinct?: JoueurRoleScalarFieldEnum | JoueurRoleScalarFieldEnum[]
  }

  /**
   * JoueurRole findMany
   */
  export type JoueurRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * Filter, which JoueurRoles to fetch.
     */
    where?: JoueurRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurRoles to fetch.
     */
    orderBy?: JoueurRoleOrderByWithRelationInput | JoueurRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JoueurRoles.
     */
    cursor?: JoueurRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurRoles.
     */
    skip?: number
    distinct?: JoueurRoleScalarFieldEnum | JoueurRoleScalarFieldEnum[]
  }

  /**
   * JoueurRole create
   */
  export type JoueurRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a JoueurRole.
     */
    data: XOR<JoueurRoleCreateInput, JoueurRoleUncheckedCreateInput>
  }

  /**
   * JoueurRole createMany
   */
  export type JoueurRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JoueurRoles.
     */
    data: JoueurRoleCreateManyInput | JoueurRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JoueurRole createManyAndReturn
   */
  export type JoueurRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * The data used to create many JoueurRoles.
     */
    data: JoueurRoleCreateManyInput | JoueurRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JoueurRole update
   */
  export type JoueurRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a JoueurRole.
     */
    data: XOR<JoueurRoleUpdateInput, JoueurRoleUncheckedUpdateInput>
    /**
     * Choose, which JoueurRole to update.
     */
    where: JoueurRoleWhereUniqueInput
  }

  /**
   * JoueurRole updateMany
   */
  export type JoueurRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JoueurRoles.
     */
    data: XOR<JoueurRoleUpdateManyMutationInput, JoueurRoleUncheckedUpdateManyInput>
    /**
     * Filter which JoueurRoles to update
     */
    where?: JoueurRoleWhereInput
    /**
     * Limit how many JoueurRoles to update.
     */
    limit?: number
  }

  /**
   * JoueurRole updateManyAndReturn
   */
  export type JoueurRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * The data used to update JoueurRoles.
     */
    data: XOR<JoueurRoleUpdateManyMutationInput, JoueurRoleUncheckedUpdateManyInput>
    /**
     * Filter which JoueurRoles to update
     */
    where?: JoueurRoleWhereInput
    /**
     * Limit how many JoueurRoles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JoueurRole upsert
   */
  export type JoueurRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the JoueurRole to update in case it exists.
     */
    where: JoueurRoleWhereUniqueInput
    /**
     * In case the JoueurRole found by the `where` argument doesn't exist, create a new JoueurRole with this data.
     */
    create: XOR<JoueurRoleCreateInput, JoueurRoleUncheckedCreateInput>
    /**
     * In case the JoueurRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoueurRoleUpdateInput, JoueurRoleUncheckedUpdateInput>
  }

  /**
   * JoueurRole delete
   */
  export type JoueurRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
    /**
     * Filter which JoueurRole to delete.
     */
    where: JoueurRoleWhereUniqueInput
  }

  /**
   * JoueurRole deleteMany
   */
  export type JoueurRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JoueurRoles to delete
     */
    where?: JoueurRoleWhereInput
    /**
     * Limit how many JoueurRoles to delete.
     */
    limit?: number
  }

  /**
   * JoueurRole without action
   */
  export type JoueurRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurRole
     */
    select?: JoueurRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurRole
     */
    omit?: JoueurRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurRoleInclude<ExtArgs> | null
  }


  /**
   * Model JoueurFunction
   */

  export type AggregateJoueurFunction = {
    _count: JoueurFunctionCountAggregateOutputType | null
    _avg: JoueurFunctionAvgAggregateOutputType | null
    _sum: JoueurFunctionSumAggregateOutputType | null
    _min: JoueurFunctionMinAggregateOutputType | null
    _max: JoueurFunctionMaxAggregateOutputType | null
  }

  export type JoueurFunctionAvgAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    function_id: number | null
  }

  export type JoueurFunctionSumAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    function_id: number | null
  }

  export type JoueurFunctionMinAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    function_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurFunctionMaxAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    function_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurFunctionCountAggregateOutputType = {
    id: number
    joueur_id: number
    function_id: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type JoueurFunctionAvgAggregateInputType = {
    id?: true
    joueur_id?: true
    function_id?: true
  }

  export type JoueurFunctionSumAggregateInputType = {
    id?: true
    joueur_id?: true
    function_id?: true
  }

  export type JoueurFunctionMinAggregateInputType = {
    id?: true
    joueur_id?: true
    function_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurFunctionMaxAggregateInputType = {
    id?: true
    joueur_id?: true
    function_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurFunctionCountAggregateInputType = {
    id?: true
    joueur_id?: true
    function_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type JoueurFunctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JoueurFunction to aggregate.
     */
    where?: JoueurFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurFunctions to fetch.
     */
    orderBy?: JoueurFunctionOrderByWithRelationInput | JoueurFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoueurFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurFunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JoueurFunctions
    **/
    _count?: true | JoueurFunctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoueurFunctionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoueurFunctionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoueurFunctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoueurFunctionMaxAggregateInputType
  }

  export type GetJoueurFunctionAggregateType<T extends JoueurFunctionAggregateArgs> = {
        [P in keyof T & keyof AggregateJoueurFunction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoueurFunction[P]>
      : GetScalarType<T[P], AggregateJoueurFunction[P]>
  }




  export type JoueurFunctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurFunctionWhereInput
    orderBy?: JoueurFunctionOrderByWithAggregationInput | JoueurFunctionOrderByWithAggregationInput[]
    by: JoueurFunctionScalarFieldEnum[] | JoueurFunctionScalarFieldEnum
    having?: JoueurFunctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoueurFunctionCountAggregateInputType | true
    _avg?: JoueurFunctionAvgAggregateInputType
    _sum?: JoueurFunctionSumAggregateInputType
    _min?: JoueurFunctionMinAggregateInputType
    _max?: JoueurFunctionMaxAggregateInputType
  }

  export type JoueurFunctionGroupByOutputType = {
    id: number
    joueur_id: number
    function_id: number
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: JoueurFunctionCountAggregateOutputType | null
    _avg: JoueurFunctionAvgAggregateOutputType | null
    _sum: JoueurFunctionSumAggregateOutputType | null
    _min: JoueurFunctionMinAggregateOutputType | null
    _max: JoueurFunctionMaxAggregateOutputType | null
  }

  type GetJoueurFunctionGroupByPayload<T extends JoueurFunctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoueurFunctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoueurFunctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoueurFunctionGroupByOutputType[P]>
            : GetScalarType<T[P], JoueurFunctionGroupByOutputType[P]>
        }
      >
    >


  export type JoueurFunctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    function_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    function?: boolean | FunctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurFunction"]>

  export type JoueurFunctionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    function_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    function?: boolean | FunctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurFunction"]>

  export type JoueurFunctionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    function_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    function?: boolean | FunctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurFunction"]>

  export type JoueurFunctionSelectScalar = {
    id?: boolean
    joueur_id?: boolean
    function_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type JoueurFunctionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "joueur_id" | "function_id" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["joueurFunction"]>
  export type JoueurFunctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    function?: boolean | FunctionDefaultArgs<ExtArgs>
  }
  export type JoueurFunctionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    function?: boolean | FunctionDefaultArgs<ExtArgs>
  }
  export type JoueurFunctionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    function?: boolean | FunctionDefaultArgs<ExtArgs>
  }

  export type $JoueurFunctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JoueurFunction"
    objects: {
      joueur: Prisma.$JoueurPayload<ExtArgs>
      function: Prisma.$FunctionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      joueur_id: number
      function_id: number
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["joueurFunction"]>
    composites: {}
  }

  type JoueurFunctionGetPayload<S extends boolean | null | undefined | JoueurFunctionDefaultArgs> = $Result.GetResult<Prisma.$JoueurFunctionPayload, S>

  type JoueurFunctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JoueurFunctionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JoueurFunctionCountAggregateInputType | true
    }

  export interface JoueurFunctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JoueurFunction'], meta: { name: 'JoueurFunction' } }
    /**
     * Find zero or one JoueurFunction that matches the filter.
     * @param {JoueurFunctionFindUniqueArgs} args - Arguments to find a JoueurFunction
     * @example
     * // Get one JoueurFunction
     * const joueurFunction = await prisma.joueurFunction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JoueurFunctionFindUniqueArgs>(args: SelectSubset<T, JoueurFunctionFindUniqueArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JoueurFunction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JoueurFunctionFindUniqueOrThrowArgs} args - Arguments to find a JoueurFunction
     * @example
     * // Get one JoueurFunction
     * const joueurFunction = await prisma.joueurFunction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JoueurFunctionFindUniqueOrThrowArgs>(args: SelectSubset<T, JoueurFunctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JoueurFunction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionFindFirstArgs} args - Arguments to find a JoueurFunction
     * @example
     * // Get one JoueurFunction
     * const joueurFunction = await prisma.joueurFunction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JoueurFunctionFindFirstArgs>(args?: SelectSubset<T, JoueurFunctionFindFirstArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JoueurFunction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionFindFirstOrThrowArgs} args - Arguments to find a JoueurFunction
     * @example
     * // Get one JoueurFunction
     * const joueurFunction = await prisma.joueurFunction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JoueurFunctionFindFirstOrThrowArgs>(args?: SelectSubset<T, JoueurFunctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JoueurFunctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JoueurFunctions
     * const joueurFunctions = await prisma.joueurFunction.findMany()
     * 
     * // Get first 10 JoueurFunctions
     * const joueurFunctions = await prisma.joueurFunction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const joueurFunctionWithIdOnly = await prisma.joueurFunction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JoueurFunctionFindManyArgs>(args?: SelectSubset<T, JoueurFunctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JoueurFunction.
     * @param {JoueurFunctionCreateArgs} args - Arguments to create a JoueurFunction.
     * @example
     * // Create one JoueurFunction
     * const JoueurFunction = await prisma.joueurFunction.create({
     *   data: {
     *     // ... data to create a JoueurFunction
     *   }
     * })
     * 
     */
    create<T extends JoueurFunctionCreateArgs>(args: SelectSubset<T, JoueurFunctionCreateArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JoueurFunctions.
     * @param {JoueurFunctionCreateManyArgs} args - Arguments to create many JoueurFunctions.
     * @example
     * // Create many JoueurFunctions
     * const joueurFunction = await prisma.joueurFunction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JoueurFunctionCreateManyArgs>(args?: SelectSubset<T, JoueurFunctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JoueurFunctions and returns the data saved in the database.
     * @param {JoueurFunctionCreateManyAndReturnArgs} args - Arguments to create many JoueurFunctions.
     * @example
     * // Create many JoueurFunctions
     * const joueurFunction = await prisma.joueurFunction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JoueurFunctions and only return the `id`
     * const joueurFunctionWithIdOnly = await prisma.joueurFunction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JoueurFunctionCreateManyAndReturnArgs>(args?: SelectSubset<T, JoueurFunctionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JoueurFunction.
     * @param {JoueurFunctionDeleteArgs} args - Arguments to delete one JoueurFunction.
     * @example
     * // Delete one JoueurFunction
     * const JoueurFunction = await prisma.joueurFunction.delete({
     *   where: {
     *     // ... filter to delete one JoueurFunction
     *   }
     * })
     * 
     */
    delete<T extends JoueurFunctionDeleteArgs>(args: SelectSubset<T, JoueurFunctionDeleteArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JoueurFunction.
     * @param {JoueurFunctionUpdateArgs} args - Arguments to update one JoueurFunction.
     * @example
     * // Update one JoueurFunction
     * const joueurFunction = await prisma.joueurFunction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JoueurFunctionUpdateArgs>(args: SelectSubset<T, JoueurFunctionUpdateArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JoueurFunctions.
     * @param {JoueurFunctionDeleteManyArgs} args - Arguments to filter JoueurFunctions to delete.
     * @example
     * // Delete a few JoueurFunctions
     * const { count } = await prisma.joueurFunction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JoueurFunctionDeleteManyArgs>(args?: SelectSubset<T, JoueurFunctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JoueurFunctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JoueurFunctions
     * const joueurFunction = await prisma.joueurFunction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JoueurFunctionUpdateManyArgs>(args: SelectSubset<T, JoueurFunctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JoueurFunctions and returns the data updated in the database.
     * @param {JoueurFunctionUpdateManyAndReturnArgs} args - Arguments to update many JoueurFunctions.
     * @example
     * // Update many JoueurFunctions
     * const joueurFunction = await prisma.joueurFunction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JoueurFunctions and only return the `id`
     * const joueurFunctionWithIdOnly = await prisma.joueurFunction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JoueurFunctionUpdateManyAndReturnArgs>(args: SelectSubset<T, JoueurFunctionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JoueurFunction.
     * @param {JoueurFunctionUpsertArgs} args - Arguments to update or create a JoueurFunction.
     * @example
     * // Update or create a JoueurFunction
     * const joueurFunction = await prisma.joueurFunction.upsert({
     *   create: {
     *     // ... data to create a JoueurFunction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JoueurFunction we want to update
     *   }
     * })
     */
    upsert<T extends JoueurFunctionUpsertArgs>(args: SelectSubset<T, JoueurFunctionUpsertArgs<ExtArgs>>): Prisma__JoueurFunctionClient<$Result.GetResult<Prisma.$JoueurFunctionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JoueurFunctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionCountArgs} args - Arguments to filter JoueurFunctions to count.
     * @example
     * // Count the number of JoueurFunctions
     * const count = await prisma.joueurFunction.count({
     *   where: {
     *     // ... the filter for the JoueurFunctions we want to count
     *   }
     * })
    **/
    count<T extends JoueurFunctionCountArgs>(
      args?: Subset<T, JoueurFunctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoueurFunctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JoueurFunction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoueurFunctionAggregateArgs>(args: Subset<T, JoueurFunctionAggregateArgs>): Prisma.PrismaPromise<GetJoueurFunctionAggregateType<T>>

    /**
     * Group by JoueurFunction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFunctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoueurFunctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoueurFunctionGroupByArgs['orderBy'] }
        : { orderBy?: JoueurFunctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoueurFunctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoueurFunctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JoueurFunction model
   */
  readonly fields: JoueurFunctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JoueurFunction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoueurFunctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueur<T extends JoueurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JoueurDefaultArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    function<T extends FunctionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FunctionDefaultArgs<ExtArgs>>): Prisma__FunctionClient<$Result.GetResult<Prisma.$FunctionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JoueurFunction model
   */
  interface JoueurFunctionFieldRefs {
    readonly id: FieldRef<"JoueurFunction", 'Int'>
    readonly joueur_id: FieldRef<"JoueurFunction", 'Int'>
    readonly function_id: FieldRef<"JoueurFunction", 'Int'>
    readonly created_at: FieldRef<"JoueurFunction", 'DateTime'>
    readonly updated_at: FieldRef<"JoueurFunction", 'DateTime'>
    readonly created_by: FieldRef<"JoueurFunction", 'String'>
    readonly updated_by: FieldRef<"JoueurFunction", 'String'>
    readonly is_deleted: FieldRef<"JoueurFunction", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * JoueurFunction findUnique
   */
  export type JoueurFunctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * Filter, which JoueurFunction to fetch.
     */
    where: JoueurFunctionWhereUniqueInput
  }

  /**
   * JoueurFunction findUniqueOrThrow
   */
  export type JoueurFunctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * Filter, which JoueurFunction to fetch.
     */
    where: JoueurFunctionWhereUniqueInput
  }

  /**
   * JoueurFunction findFirst
   */
  export type JoueurFunctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * Filter, which JoueurFunction to fetch.
     */
    where?: JoueurFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurFunctions to fetch.
     */
    orderBy?: JoueurFunctionOrderByWithRelationInput | JoueurFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JoueurFunctions.
     */
    cursor?: JoueurFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurFunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JoueurFunctions.
     */
    distinct?: JoueurFunctionScalarFieldEnum | JoueurFunctionScalarFieldEnum[]
  }

  /**
   * JoueurFunction findFirstOrThrow
   */
  export type JoueurFunctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * Filter, which JoueurFunction to fetch.
     */
    where?: JoueurFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurFunctions to fetch.
     */
    orderBy?: JoueurFunctionOrderByWithRelationInput | JoueurFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JoueurFunctions.
     */
    cursor?: JoueurFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurFunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JoueurFunctions.
     */
    distinct?: JoueurFunctionScalarFieldEnum | JoueurFunctionScalarFieldEnum[]
  }

  /**
   * JoueurFunction findMany
   */
  export type JoueurFunctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * Filter, which JoueurFunctions to fetch.
     */
    where?: JoueurFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurFunctions to fetch.
     */
    orderBy?: JoueurFunctionOrderByWithRelationInput | JoueurFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JoueurFunctions.
     */
    cursor?: JoueurFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurFunctions.
     */
    skip?: number
    distinct?: JoueurFunctionScalarFieldEnum | JoueurFunctionScalarFieldEnum[]
  }

  /**
   * JoueurFunction create
   */
  export type JoueurFunctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * The data needed to create a JoueurFunction.
     */
    data: XOR<JoueurFunctionCreateInput, JoueurFunctionUncheckedCreateInput>
  }

  /**
   * JoueurFunction createMany
   */
  export type JoueurFunctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JoueurFunctions.
     */
    data: JoueurFunctionCreateManyInput | JoueurFunctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JoueurFunction createManyAndReturn
   */
  export type JoueurFunctionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * The data used to create many JoueurFunctions.
     */
    data: JoueurFunctionCreateManyInput | JoueurFunctionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JoueurFunction update
   */
  export type JoueurFunctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * The data needed to update a JoueurFunction.
     */
    data: XOR<JoueurFunctionUpdateInput, JoueurFunctionUncheckedUpdateInput>
    /**
     * Choose, which JoueurFunction to update.
     */
    where: JoueurFunctionWhereUniqueInput
  }

  /**
   * JoueurFunction updateMany
   */
  export type JoueurFunctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JoueurFunctions.
     */
    data: XOR<JoueurFunctionUpdateManyMutationInput, JoueurFunctionUncheckedUpdateManyInput>
    /**
     * Filter which JoueurFunctions to update
     */
    where?: JoueurFunctionWhereInput
    /**
     * Limit how many JoueurFunctions to update.
     */
    limit?: number
  }

  /**
   * JoueurFunction updateManyAndReturn
   */
  export type JoueurFunctionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * The data used to update JoueurFunctions.
     */
    data: XOR<JoueurFunctionUpdateManyMutationInput, JoueurFunctionUncheckedUpdateManyInput>
    /**
     * Filter which JoueurFunctions to update
     */
    where?: JoueurFunctionWhereInput
    /**
     * Limit how many JoueurFunctions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JoueurFunction upsert
   */
  export type JoueurFunctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * The filter to search for the JoueurFunction to update in case it exists.
     */
    where: JoueurFunctionWhereUniqueInput
    /**
     * In case the JoueurFunction found by the `where` argument doesn't exist, create a new JoueurFunction with this data.
     */
    create: XOR<JoueurFunctionCreateInput, JoueurFunctionUncheckedCreateInput>
    /**
     * In case the JoueurFunction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoueurFunctionUpdateInput, JoueurFunctionUncheckedUpdateInput>
  }

  /**
   * JoueurFunction delete
   */
  export type JoueurFunctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
    /**
     * Filter which JoueurFunction to delete.
     */
    where: JoueurFunctionWhereUniqueInput
  }

  /**
   * JoueurFunction deleteMany
   */
  export type JoueurFunctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JoueurFunctions to delete
     */
    where?: JoueurFunctionWhereInput
    /**
     * Limit how many JoueurFunctions to delete.
     */
    limit?: number
  }

  /**
   * JoueurFunction without action
   */
  export type JoueurFunctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurFunction
     */
    select?: JoueurFunctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurFunction
     */
    omit?: JoueurFunctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurFunctionInclude<ExtArgs> | null
  }


  /**
   * Model JoueurAgrement
   */

  export type AggregateJoueurAgrement = {
    _count: JoueurAgrementCountAggregateOutputType | null
    _avg: JoueurAgrementAvgAggregateOutputType | null
    _sum: JoueurAgrementSumAggregateOutputType | null
    _min: JoueurAgrementMinAggregateOutputType | null
    _max: JoueurAgrementMaxAggregateOutputType | null
  }

  export type JoueurAgrementAvgAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    agrement_id: number | null
  }

  export type JoueurAgrementSumAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    agrement_id: number | null
  }

  export type JoueurAgrementMinAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    agrement_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurAgrementMaxAggregateOutputType = {
    id: number | null
    joueur_id: number | null
    agrement_id: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean | null
  }

  export type JoueurAgrementCountAggregateOutputType = {
    id: number
    joueur_id: number
    agrement_id: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    is_deleted: number
    _all: number
  }


  export type JoueurAgrementAvgAggregateInputType = {
    id?: true
    joueur_id?: true
    agrement_id?: true
  }

  export type JoueurAgrementSumAggregateInputType = {
    id?: true
    joueur_id?: true
    agrement_id?: true
  }

  export type JoueurAgrementMinAggregateInputType = {
    id?: true
    joueur_id?: true
    agrement_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurAgrementMaxAggregateInputType = {
    id?: true
    joueur_id?: true
    agrement_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
  }

  export type JoueurAgrementCountAggregateInputType = {
    id?: true
    joueur_id?: true
    agrement_id?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    is_deleted?: true
    _all?: true
  }

  export type JoueurAgrementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JoueurAgrement to aggregate.
     */
    where?: JoueurAgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurAgrements to fetch.
     */
    orderBy?: JoueurAgrementOrderByWithRelationInput | JoueurAgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoueurAgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurAgrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurAgrements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JoueurAgrements
    **/
    _count?: true | JoueurAgrementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoueurAgrementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoueurAgrementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoueurAgrementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoueurAgrementMaxAggregateInputType
  }

  export type GetJoueurAgrementAggregateType<T extends JoueurAgrementAggregateArgs> = {
        [P in keyof T & keyof AggregateJoueurAgrement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoueurAgrement[P]>
      : GetScalarType<T[P], AggregateJoueurAgrement[P]>
  }




  export type JoueurAgrementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurAgrementWhereInput
    orderBy?: JoueurAgrementOrderByWithAggregationInput | JoueurAgrementOrderByWithAggregationInput[]
    by: JoueurAgrementScalarFieldEnum[] | JoueurAgrementScalarFieldEnum
    having?: JoueurAgrementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoueurAgrementCountAggregateInputType | true
    _avg?: JoueurAgrementAvgAggregateInputType
    _sum?: JoueurAgrementSumAggregateInputType
    _min?: JoueurAgrementMinAggregateInputType
    _max?: JoueurAgrementMaxAggregateInputType
  }

  export type JoueurAgrementGroupByOutputType = {
    id: number
    joueur_id: number
    agrement_id: number
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    is_deleted: boolean
    _count: JoueurAgrementCountAggregateOutputType | null
    _avg: JoueurAgrementAvgAggregateOutputType | null
    _sum: JoueurAgrementSumAggregateOutputType | null
    _min: JoueurAgrementMinAggregateOutputType | null
    _max: JoueurAgrementMaxAggregateOutputType | null
  }

  type GetJoueurAgrementGroupByPayload<T extends JoueurAgrementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoueurAgrementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoueurAgrementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoueurAgrementGroupByOutputType[P]>
            : GetScalarType<T[P], JoueurAgrementGroupByOutputType[P]>
        }
      >
    >


  export type JoueurAgrementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    agrement_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    agrement?: boolean | AgrementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurAgrement"]>

  export type JoueurAgrementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    agrement_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    agrement?: boolean | AgrementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurAgrement"]>

  export type JoueurAgrementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joueur_id?: boolean
    agrement_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    agrement?: boolean | AgrementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueurAgrement"]>

  export type JoueurAgrementSelectScalar = {
    id?: boolean
    joueur_id?: boolean
    agrement_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    is_deleted?: boolean
  }

  export type JoueurAgrementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "joueur_id" | "agrement_id" | "created_at" | "updated_at" | "created_by" | "updated_by" | "is_deleted", ExtArgs["result"]["joueurAgrement"]>
  export type JoueurAgrementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    agrement?: boolean | AgrementDefaultArgs<ExtArgs>
  }
  export type JoueurAgrementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    agrement?: boolean | AgrementDefaultArgs<ExtArgs>
  }
  export type JoueurAgrementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
    agrement?: boolean | AgrementDefaultArgs<ExtArgs>
  }

  export type $JoueurAgrementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JoueurAgrement"
    objects: {
      joueur: Prisma.$JoueurPayload<ExtArgs>
      agrement: Prisma.$AgrementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      joueur_id: number
      agrement_id: number
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      is_deleted: boolean
    }, ExtArgs["result"]["joueurAgrement"]>
    composites: {}
  }

  type JoueurAgrementGetPayload<S extends boolean | null | undefined | JoueurAgrementDefaultArgs> = $Result.GetResult<Prisma.$JoueurAgrementPayload, S>

  type JoueurAgrementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JoueurAgrementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JoueurAgrementCountAggregateInputType | true
    }

  export interface JoueurAgrementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JoueurAgrement'], meta: { name: 'JoueurAgrement' } }
    /**
     * Find zero or one JoueurAgrement that matches the filter.
     * @param {JoueurAgrementFindUniqueArgs} args - Arguments to find a JoueurAgrement
     * @example
     * // Get one JoueurAgrement
     * const joueurAgrement = await prisma.joueurAgrement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JoueurAgrementFindUniqueArgs>(args: SelectSubset<T, JoueurAgrementFindUniqueArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JoueurAgrement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JoueurAgrementFindUniqueOrThrowArgs} args - Arguments to find a JoueurAgrement
     * @example
     * // Get one JoueurAgrement
     * const joueurAgrement = await prisma.joueurAgrement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JoueurAgrementFindUniqueOrThrowArgs>(args: SelectSubset<T, JoueurAgrementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JoueurAgrement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementFindFirstArgs} args - Arguments to find a JoueurAgrement
     * @example
     * // Get one JoueurAgrement
     * const joueurAgrement = await prisma.joueurAgrement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JoueurAgrementFindFirstArgs>(args?: SelectSubset<T, JoueurAgrementFindFirstArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JoueurAgrement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementFindFirstOrThrowArgs} args - Arguments to find a JoueurAgrement
     * @example
     * // Get one JoueurAgrement
     * const joueurAgrement = await prisma.joueurAgrement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JoueurAgrementFindFirstOrThrowArgs>(args?: SelectSubset<T, JoueurAgrementFindFirstOrThrowArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JoueurAgrements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JoueurAgrements
     * const joueurAgrements = await prisma.joueurAgrement.findMany()
     * 
     * // Get first 10 JoueurAgrements
     * const joueurAgrements = await prisma.joueurAgrement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const joueurAgrementWithIdOnly = await prisma.joueurAgrement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JoueurAgrementFindManyArgs>(args?: SelectSubset<T, JoueurAgrementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JoueurAgrement.
     * @param {JoueurAgrementCreateArgs} args - Arguments to create a JoueurAgrement.
     * @example
     * // Create one JoueurAgrement
     * const JoueurAgrement = await prisma.joueurAgrement.create({
     *   data: {
     *     // ... data to create a JoueurAgrement
     *   }
     * })
     * 
     */
    create<T extends JoueurAgrementCreateArgs>(args: SelectSubset<T, JoueurAgrementCreateArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JoueurAgrements.
     * @param {JoueurAgrementCreateManyArgs} args - Arguments to create many JoueurAgrements.
     * @example
     * // Create many JoueurAgrements
     * const joueurAgrement = await prisma.joueurAgrement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JoueurAgrementCreateManyArgs>(args?: SelectSubset<T, JoueurAgrementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JoueurAgrements and returns the data saved in the database.
     * @param {JoueurAgrementCreateManyAndReturnArgs} args - Arguments to create many JoueurAgrements.
     * @example
     * // Create many JoueurAgrements
     * const joueurAgrement = await prisma.joueurAgrement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JoueurAgrements and only return the `id`
     * const joueurAgrementWithIdOnly = await prisma.joueurAgrement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JoueurAgrementCreateManyAndReturnArgs>(args?: SelectSubset<T, JoueurAgrementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JoueurAgrement.
     * @param {JoueurAgrementDeleteArgs} args - Arguments to delete one JoueurAgrement.
     * @example
     * // Delete one JoueurAgrement
     * const JoueurAgrement = await prisma.joueurAgrement.delete({
     *   where: {
     *     // ... filter to delete one JoueurAgrement
     *   }
     * })
     * 
     */
    delete<T extends JoueurAgrementDeleteArgs>(args: SelectSubset<T, JoueurAgrementDeleteArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JoueurAgrement.
     * @param {JoueurAgrementUpdateArgs} args - Arguments to update one JoueurAgrement.
     * @example
     * // Update one JoueurAgrement
     * const joueurAgrement = await prisma.joueurAgrement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JoueurAgrementUpdateArgs>(args: SelectSubset<T, JoueurAgrementUpdateArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JoueurAgrements.
     * @param {JoueurAgrementDeleteManyArgs} args - Arguments to filter JoueurAgrements to delete.
     * @example
     * // Delete a few JoueurAgrements
     * const { count } = await prisma.joueurAgrement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JoueurAgrementDeleteManyArgs>(args?: SelectSubset<T, JoueurAgrementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JoueurAgrements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JoueurAgrements
     * const joueurAgrement = await prisma.joueurAgrement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JoueurAgrementUpdateManyArgs>(args: SelectSubset<T, JoueurAgrementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JoueurAgrements and returns the data updated in the database.
     * @param {JoueurAgrementUpdateManyAndReturnArgs} args - Arguments to update many JoueurAgrements.
     * @example
     * // Update many JoueurAgrements
     * const joueurAgrement = await prisma.joueurAgrement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JoueurAgrements and only return the `id`
     * const joueurAgrementWithIdOnly = await prisma.joueurAgrement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JoueurAgrementUpdateManyAndReturnArgs>(args: SelectSubset<T, JoueurAgrementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JoueurAgrement.
     * @param {JoueurAgrementUpsertArgs} args - Arguments to update or create a JoueurAgrement.
     * @example
     * // Update or create a JoueurAgrement
     * const joueurAgrement = await prisma.joueurAgrement.upsert({
     *   create: {
     *     // ... data to create a JoueurAgrement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JoueurAgrement we want to update
     *   }
     * })
     */
    upsert<T extends JoueurAgrementUpsertArgs>(args: SelectSubset<T, JoueurAgrementUpsertArgs<ExtArgs>>): Prisma__JoueurAgrementClient<$Result.GetResult<Prisma.$JoueurAgrementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JoueurAgrements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementCountArgs} args - Arguments to filter JoueurAgrements to count.
     * @example
     * // Count the number of JoueurAgrements
     * const count = await prisma.joueurAgrement.count({
     *   where: {
     *     // ... the filter for the JoueurAgrements we want to count
     *   }
     * })
    **/
    count<T extends JoueurAgrementCountArgs>(
      args?: Subset<T, JoueurAgrementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoueurAgrementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JoueurAgrement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoueurAgrementAggregateArgs>(args: Subset<T, JoueurAgrementAggregateArgs>): Prisma.PrismaPromise<GetJoueurAgrementAggregateType<T>>

    /**
     * Group by JoueurAgrement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAgrementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoueurAgrementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoueurAgrementGroupByArgs['orderBy'] }
        : { orderBy?: JoueurAgrementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoueurAgrementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoueurAgrementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JoueurAgrement model
   */
  readonly fields: JoueurAgrementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JoueurAgrement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoueurAgrementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joueur<T extends JoueurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JoueurDefaultArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    agrement<T extends AgrementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgrementDefaultArgs<ExtArgs>>): Prisma__AgrementClient<$Result.GetResult<Prisma.$AgrementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JoueurAgrement model
   */
  interface JoueurAgrementFieldRefs {
    readonly id: FieldRef<"JoueurAgrement", 'Int'>
    readonly joueur_id: FieldRef<"JoueurAgrement", 'Int'>
    readonly agrement_id: FieldRef<"JoueurAgrement", 'Int'>
    readonly created_at: FieldRef<"JoueurAgrement", 'DateTime'>
    readonly updated_at: FieldRef<"JoueurAgrement", 'DateTime'>
    readonly created_by: FieldRef<"JoueurAgrement", 'String'>
    readonly updated_by: FieldRef<"JoueurAgrement", 'String'>
    readonly is_deleted: FieldRef<"JoueurAgrement", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * JoueurAgrement findUnique
   */
  export type JoueurAgrementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * Filter, which JoueurAgrement to fetch.
     */
    where: JoueurAgrementWhereUniqueInput
  }

  /**
   * JoueurAgrement findUniqueOrThrow
   */
  export type JoueurAgrementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * Filter, which JoueurAgrement to fetch.
     */
    where: JoueurAgrementWhereUniqueInput
  }

  /**
   * JoueurAgrement findFirst
   */
  export type JoueurAgrementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * Filter, which JoueurAgrement to fetch.
     */
    where?: JoueurAgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurAgrements to fetch.
     */
    orderBy?: JoueurAgrementOrderByWithRelationInput | JoueurAgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JoueurAgrements.
     */
    cursor?: JoueurAgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurAgrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurAgrements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JoueurAgrements.
     */
    distinct?: JoueurAgrementScalarFieldEnum | JoueurAgrementScalarFieldEnum[]
  }

  /**
   * JoueurAgrement findFirstOrThrow
   */
  export type JoueurAgrementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * Filter, which JoueurAgrement to fetch.
     */
    where?: JoueurAgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurAgrements to fetch.
     */
    orderBy?: JoueurAgrementOrderByWithRelationInput | JoueurAgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JoueurAgrements.
     */
    cursor?: JoueurAgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurAgrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurAgrements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JoueurAgrements.
     */
    distinct?: JoueurAgrementScalarFieldEnum | JoueurAgrementScalarFieldEnum[]
  }

  /**
   * JoueurAgrement findMany
   */
  export type JoueurAgrementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * Filter, which JoueurAgrements to fetch.
     */
    where?: JoueurAgrementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JoueurAgrements to fetch.
     */
    orderBy?: JoueurAgrementOrderByWithRelationInput | JoueurAgrementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JoueurAgrements.
     */
    cursor?: JoueurAgrementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JoueurAgrements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JoueurAgrements.
     */
    skip?: number
    distinct?: JoueurAgrementScalarFieldEnum | JoueurAgrementScalarFieldEnum[]
  }

  /**
   * JoueurAgrement create
   */
  export type JoueurAgrementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * The data needed to create a JoueurAgrement.
     */
    data: XOR<JoueurAgrementCreateInput, JoueurAgrementUncheckedCreateInput>
  }

  /**
   * JoueurAgrement createMany
   */
  export type JoueurAgrementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JoueurAgrements.
     */
    data: JoueurAgrementCreateManyInput | JoueurAgrementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JoueurAgrement createManyAndReturn
   */
  export type JoueurAgrementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * The data used to create many JoueurAgrements.
     */
    data: JoueurAgrementCreateManyInput | JoueurAgrementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JoueurAgrement update
   */
  export type JoueurAgrementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * The data needed to update a JoueurAgrement.
     */
    data: XOR<JoueurAgrementUpdateInput, JoueurAgrementUncheckedUpdateInput>
    /**
     * Choose, which JoueurAgrement to update.
     */
    where: JoueurAgrementWhereUniqueInput
  }

  /**
   * JoueurAgrement updateMany
   */
  export type JoueurAgrementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JoueurAgrements.
     */
    data: XOR<JoueurAgrementUpdateManyMutationInput, JoueurAgrementUncheckedUpdateManyInput>
    /**
     * Filter which JoueurAgrements to update
     */
    where?: JoueurAgrementWhereInput
    /**
     * Limit how many JoueurAgrements to update.
     */
    limit?: number
  }

  /**
   * JoueurAgrement updateManyAndReturn
   */
  export type JoueurAgrementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * The data used to update JoueurAgrements.
     */
    data: XOR<JoueurAgrementUpdateManyMutationInput, JoueurAgrementUncheckedUpdateManyInput>
    /**
     * Filter which JoueurAgrements to update
     */
    where?: JoueurAgrementWhereInput
    /**
     * Limit how many JoueurAgrements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JoueurAgrement upsert
   */
  export type JoueurAgrementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * The filter to search for the JoueurAgrement to update in case it exists.
     */
    where: JoueurAgrementWhereUniqueInput
    /**
     * In case the JoueurAgrement found by the `where` argument doesn't exist, create a new JoueurAgrement with this data.
     */
    create: XOR<JoueurAgrementCreateInput, JoueurAgrementUncheckedCreateInput>
    /**
     * In case the JoueurAgrement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoueurAgrementUpdateInput, JoueurAgrementUncheckedUpdateInput>
  }

  /**
   * JoueurAgrement delete
   */
  export type JoueurAgrementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
    /**
     * Filter which JoueurAgrement to delete.
     */
    where: JoueurAgrementWhereUniqueInput
  }

  /**
   * JoueurAgrement deleteMany
   */
  export type JoueurAgrementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JoueurAgrements to delete
     */
    where?: JoueurAgrementWhereInput
    /**
     * Limit how many JoueurAgrements to delete.
     */
    limit?: number
  }

  /**
   * JoueurAgrement without action
   */
  export type JoueurAgrementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurAgrement
     */
    select?: JoueurAgrementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JoueurAgrement
     */
    omit?: JoueurAgrementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurAgrementInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClubScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    code: 'code',
    adresse: 'adresse',
    telephone: 'telephone',
    email: 'email',
    site_web: 'site_web',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const JoueurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    licence: 'licence',
    email: 'email',
    telephone: 'telephone',
    date_naissance: 'date_naissance',
    club_id: 'club_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type JoueurScalarFieldEnum = (typeof JoueurScalarFieldEnum)[keyof typeof JoueurScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const FunctionScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type FunctionScalarFieldEnum = (typeof FunctionScalarFieldEnum)[keyof typeof FunctionScalarFieldEnum]


  export const AgrementScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type AgrementScalarFieldEnum = (typeof AgrementScalarFieldEnum)[keyof typeof AgrementScalarFieldEnum]


  export const JoueurRoleScalarFieldEnum: {
    id: 'id',
    joueur_id: 'joueur_id',
    role_id: 'role_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type JoueurRoleScalarFieldEnum = (typeof JoueurRoleScalarFieldEnum)[keyof typeof JoueurRoleScalarFieldEnum]


  export const JoueurFunctionScalarFieldEnum: {
    id: 'id',
    joueur_id: 'joueur_id',
    function_id: 'function_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type JoueurFunctionScalarFieldEnum = (typeof JoueurFunctionScalarFieldEnum)[keyof typeof JoueurFunctionScalarFieldEnum]


  export const JoueurAgrementScalarFieldEnum: {
    id: 'id',
    joueur_id: 'joueur_id',
    agrement_id: 'agrement_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    is_deleted: 'is_deleted'
  };

  export type JoueurAgrementScalarFieldEnum = (typeof JoueurAgrementScalarFieldEnum)[keyof typeof JoueurAgrementScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ClubWhereInput = {
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    id?: IntFilter<"Club"> | number
    nom?: StringFilter<"Club"> | string
    code?: StringFilter<"Club"> | string
    adresse?: StringNullableFilter<"Club"> | string | null
    telephone?: StringNullableFilter<"Club"> | string | null
    email?: StringNullableFilter<"Club"> | string | null
    site_web?: StringNullableFilter<"Club"> | string | null
    created_at?: DateTimeFilter<"Club"> | Date | string
    updated_at?: DateTimeFilter<"Club"> | Date | string
    created_by?: StringNullableFilter<"Club"> | string | null
    updated_by?: StringNullableFilter<"Club"> | string | null
    is_deleted?: BoolFilter<"Club"> | boolean
    joueurs?: JoueurListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    code?: SortOrder
    adresse?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    site_web?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueurs?: JoueurOrderByRelationAggregateInput
  }

  export type ClubWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    code?: string
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    adresse?: StringNullableFilter<"Club"> | string | null
    telephone?: StringNullableFilter<"Club"> | string | null
    email?: StringNullableFilter<"Club"> | string | null
    site_web?: StringNullableFilter<"Club"> | string | null
    created_at?: DateTimeFilter<"Club"> | Date | string
    updated_at?: DateTimeFilter<"Club"> | Date | string
    created_by?: StringNullableFilter<"Club"> | string | null
    updated_by?: StringNullableFilter<"Club"> | string | null
    is_deleted?: BoolFilter<"Club"> | boolean
    joueurs?: JoueurListRelationFilter
  }, "id" | "nom" | "code">

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    code?: SortOrder
    adresse?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    site_web?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: ClubCountOrderByAggregateInput
    _avg?: ClubAvgOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
    _sum?: ClubSumOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    OR?: ClubScalarWhereWithAggregatesInput[]
    NOT?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Club"> | number
    nom?: StringWithAggregatesFilter<"Club"> | string
    code?: StringWithAggregatesFilter<"Club"> | string
    adresse?: StringNullableWithAggregatesFilter<"Club"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Club"> | string | null
    email?: StringNullableWithAggregatesFilter<"Club"> | string | null
    site_web?: StringNullableWithAggregatesFilter<"Club"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"Club"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"Club"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"Club"> | boolean
  }

  export type JoueurWhereInput = {
    AND?: JoueurWhereInput | JoueurWhereInput[]
    OR?: JoueurWhereInput[]
    NOT?: JoueurWhereInput | JoueurWhereInput[]
    id?: IntFilter<"Joueur"> | number
    nom?: StringFilter<"Joueur"> | string
    prenom?: StringFilter<"Joueur"> | string
    licence?: StringFilter<"Joueur"> | string
    email?: StringNullableFilter<"Joueur"> | string | null
    telephone?: StringNullableFilter<"Joueur"> | string | null
    date_naissance?: DateTimeNullableFilter<"Joueur"> | Date | string | null
    club_id?: IntFilter<"Joueur"> | number
    created_at?: DateTimeFilter<"Joueur"> | Date | string
    updated_at?: DateTimeFilter<"Joueur"> | Date | string
    created_by?: StringNullableFilter<"Joueur"> | string | null
    updated_by?: StringNullableFilter<"Joueur"> | string | null
    is_deleted?: BoolFilter<"Joueur"> | boolean
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    roles?: JoueurRoleListRelationFilter
    functions?: JoueurFunctionListRelationFilter
    agrements?: JoueurAgrementListRelationFilter
  }

  export type JoueurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    licence?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    date_naissance?: SortOrderInput | SortOrder
    club_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    club?: ClubOrderByWithRelationInput
    roles?: JoueurRoleOrderByRelationAggregateInput
    functions?: JoueurFunctionOrderByRelationAggregateInput
    agrements?: JoueurAgrementOrderByRelationAggregateInput
  }

  export type JoueurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    licence?: string
    AND?: JoueurWhereInput | JoueurWhereInput[]
    OR?: JoueurWhereInput[]
    NOT?: JoueurWhereInput | JoueurWhereInput[]
    nom?: StringFilter<"Joueur"> | string
    prenom?: StringFilter<"Joueur"> | string
    email?: StringNullableFilter<"Joueur"> | string | null
    telephone?: StringNullableFilter<"Joueur"> | string | null
    date_naissance?: DateTimeNullableFilter<"Joueur"> | Date | string | null
    club_id?: IntFilter<"Joueur"> | number
    created_at?: DateTimeFilter<"Joueur"> | Date | string
    updated_at?: DateTimeFilter<"Joueur"> | Date | string
    created_by?: StringNullableFilter<"Joueur"> | string | null
    updated_by?: StringNullableFilter<"Joueur"> | string | null
    is_deleted?: BoolFilter<"Joueur"> | boolean
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
    roles?: JoueurRoleListRelationFilter
    functions?: JoueurFunctionListRelationFilter
    agrements?: JoueurAgrementListRelationFilter
  }, "id" | "licence">

  export type JoueurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    licence?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    date_naissance?: SortOrderInput | SortOrder
    club_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: JoueurCountOrderByAggregateInput
    _avg?: JoueurAvgOrderByAggregateInput
    _max?: JoueurMaxOrderByAggregateInput
    _min?: JoueurMinOrderByAggregateInput
    _sum?: JoueurSumOrderByAggregateInput
  }

  export type JoueurScalarWhereWithAggregatesInput = {
    AND?: JoueurScalarWhereWithAggregatesInput | JoueurScalarWhereWithAggregatesInput[]
    OR?: JoueurScalarWhereWithAggregatesInput[]
    NOT?: JoueurScalarWhereWithAggregatesInput | JoueurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Joueur"> | number
    nom?: StringWithAggregatesFilter<"Joueur"> | string
    prenom?: StringWithAggregatesFilter<"Joueur"> | string
    licence?: StringWithAggregatesFilter<"Joueur"> | string
    email?: StringNullableWithAggregatesFilter<"Joueur"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Joueur"> | string | null
    date_naissance?: DateTimeNullableWithAggregatesFilter<"Joueur"> | Date | string | null
    club_id?: IntWithAggregatesFilter<"Joueur"> | number
    created_at?: DateTimeWithAggregatesFilter<"Joueur"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Joueur"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"Joueur"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"Joueur"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"Joueur"> | boolean
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    nom?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    created_at?: DateTimeFilter<"Role"> | Date | string
    updated_at?: DateTimeFilter<"Role"> | Date | string
    created_by?: StringNullableFilter<"Role"> | string | null
    updated_by?: StringNullableFilter<"Role"> | string | null
    is_deleted?: BoolFilter<"Role"> | boolean
    joueurs?: JoueurRoleListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueurs?: JoueurRoleOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    created_at?: DateTimeFilter<"Role"> | Date | string
    updated_at?: DateTimeFilter<"Role"> | Date | string
    created_by?: StringNullableFilter<"Role"> | string | null
    updated_by?: StringNullableFilter<"Role"> | string | null
    is_deleted?: BoolFilter<"Role"> | boolean
    joueurs?: JoueurRoleListRelationFilter
  }, "id" | "nom">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    nom?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"Role"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"Role"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"Role"> | boolean
  }

  export type FunctionWhereInput = {
    AND?: FunctionWhereInput | FunctionWhereInput[]
    OR?: FunctionWhereInput[]
    NOT?: FunctionWhereInput | FunctionWhereInput[]
    id?: IntFilter<"Function"> | number
    nom?: StringFilter<"Function"> | string
    description?: StringNullableFilter<"Function"> | string | null
    created_at?: DateTimeFilter<"Function"> | Date | string
    updated_at?: DateTimeFilter<"Function"> | Date | string
    created_by?: StringNullableFilter<"Function"> | string | null
    updated_by?: StringNullableFilter<"Function"> | string | null
    is_deleted?: BoolFilter<"Function"> | boolean
    joueurs?: JoueurFunctionListRelationFilter
  }

  export type FunctionOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueurs?: JoueurFunctionOrderByRelationAggregateInput
  }

  export type FunctionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: FunctionWhereInput | FunctionWhereInput[]
    OR?: FunctionWhereInput[]
    NOT?: FunctionWhereInput | FunctionWhereInput[]
    description?: StringNullableFilter<"Function"> | string | null
    created_at?: DateTimeFilter<"Function"> | Date | string
    updated_at?: DateTimeFilter<"Function"> | Date | string
    created_by?: StringNullableFilter<"Function"> | string | null
    updated_by?: StringNullableFilter<"Function"> | string | null
    is_deleted?: BoolFilter<"Function"> | boolean
    joueurs?: JoueurFunctionListRelationFilter
  }, "id" | "nom">

  export type FunctionOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: FunctionCountOrderByAggregateInput
    _avg?: FunctionAvgOrderByAggregateInput
    _max?: FunctionMaxOrderByAggregateInput
    _min?: FunctionMinOrderByAggregateInput
    _sum?: FunctionSumOrderByAggregateInput
  }

  export type FunctionScalarWhereWithAggregatesInput = {
    AND?: FunctionScalarWhereWithAggregatesInput | FunctionScalarWhereWithAggregatesInput[]
    OR?: FunctionScalarWhereWithAggregatesInput[]
    NOT?: FunctionScalarWhereWithAggregatesInput | FunctionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Function"> | number
    nom?: StringWithAggregatesFilter<"Function"> | string
    description?: StringNullableWithAggregatesFilter<"Function"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Function"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Function"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"Function"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"Function"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"Function"> | boolean
  }

  export type AgrementWhereInput = {
    AND?: AgrementWhereInput | AgrementWhereInput[]
    OR?: AgrementWhereInput[]
    NOT?: AgrementWhereInput | AgrementWhereInput[]
    id?: IntFilter<"Agrement"> | number
    nom?: StringFilter<"Agrement"> | string
    description?: StringNullableFilter<"Agrement"> | string | null
    created_at?: DateTimeFilter<"Agrement"> | Date | string
    updated_at?: DateTimeFilter<"Agrement"> | Date | string
    created_by?: StringNullableFilter<"Agrement"> | string | null
    updated_by?: StringNullableFilter<"Agrement"> | string | null
    is_deleted?: BoolFilter<"Agrement"> | boolean
    joueurs?: JoueurAgrementListRelationFilter
  }

  export type AgrementOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueurs?: JoueurAgrementOrderByRelationAggregateInput
  }

  export type AgrementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: AgrementWhereInput | AgrementWhereInput[]
    OR?: AgrementWhereInput[]
    NOT?: AgrementWhereInput | AgrementWhereInput[]
    description?: StringNullableFilter<"Agrement"> | string | null
    created_at?: DateTimeFilter<"Agrement"> | Date | string
    updated_at?: DateTimeFilter<"Agrement"> | Date | string
    created_by?: StringNullableFilter<"Agrement"> | string | null
    updated_by?: StringNullableFilter<"Agrement"> | string | null
    is_deleted?: BoolFilter<"Agrement"> | boolean
    joueurs?: JoueurAgrementListRelationFilter
  }, "id" | "nom">

  export type AgrementOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: AgrementCountOrderByAggregateInput
    _avg?: AgrementAvgOrderByAggregateInput
    _max?: AgrementMaxOrderByAggregateInput
    _min?: AgrementMinOrderByAggregateInput
    _sum?: AgrementSumOrderByAggregateInput
  }

  export type AgrementScalarWhereWithAggregatesInput = {
    AND?: AgrementScalarWhereWithAggregatesInput | AgrementScalarWhereWithAggregatesInput[]
    OR?: AgrementScalarWhereWithAggregatesInput[]
    NOT?: AgrementScalarWhereWithAggregatesInput | AgrementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Agrement"> | number
    nom?: StringWithAggregatesFilter<"Agrement"> | string
    description?: StringNullableWithAggregatesFilter<"Agrement"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Agrement"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Agrement"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"Agrement"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"Agrement"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"Agrement"> | boolean
  }

  export type JoueurRoleWhereInput = {
    AND?: JoueurRoleWhereInput | JoueurRoleWhereInput[]
    OR?: JoueurRoleWhereInput[]
    NOT?: JoueurRoleWhereInput | JoueurRoleWhereInput[]
    id?: IntFilter<"JoueurRole"> | number
    joueur_id?: IntFilter<"JoueurRole"> | number
    role_id?: IntFilter<"JoueurRole"> | number
    created_at?: DateTimeFilter<"JoueurRole"> | Date | string
    updated_at?: DateTimeFilter<"JoueurRole"> | Date | string
    created_by?: StringNullableFilter<"JoueurRole"> | string | null
    updated_by?: StringNullableFilter<"JoueurRole"> | string | null
    is_deleted?: BoolFilter<"JoueurRole"> | boolean
    joueur?: XOR<JoueurScalarRelationFilter, JoueurWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type JoueurRoleOrderByWithRelationInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueur?: JoueurOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type JoueurRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    joueur_id_role_id?: JoueurRoleJoueur_idRole_idCompoundUniqueInput
    AND?: JoueurRoleWhereInput | JoueurRoleWhereInput[]
    OR?: JoueurRoleWhereInput[]
    NOT?: JoueurRoleWhereInput | JoueurRoleWhereInput[]
    joueur_id?: IntFilter<"JoueurRole"> | number
    role_id?: IntFilter<"JoueurRole"> | number
    created_at?: DateTimeFilter<"JoueurRole"> | Date | string
    updated_at?: DateTimeFilter<"JoueurRole"> | Date | string
    created_by?: StringNullableFilter<"JoueurRole"> | string | null
    updated_by?: StringNullableFilter<"JoueurRole"> | string | null
    is_deleted?: BoolFilter<"JoueurRole"> | boolean
    joueur?: XOR<JoueurScalarRelationFilter, JoueurWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "id" | "joueur_id_role_id">

  export type JoueurRoleOrderByWithAggregationInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: JoueurRoleCountOrderByAggregateInput
    _avg?: JoueurRoleAvgOrderByAggregateInput
    _max?: JoueurRoleMaxOrderByAggregateInput
    _min?: JoueurRoleMinOrderByAggregateInput
    _sum?: JoueurRoleSumOrderByAggregateInput
  }

  export type JoueurRoleScalarWhereWithAggregatesInput = {
    AND?: JoueurRoleScalarWhereWithAggregatesInput | JoueurRoleScalarWhereWithAggregatesInput[]
    OR?: JoueurRoleScalarWhereWithAggregatesInput[]
    NOT?: JoueurRoleScalarWhereWithAggregatesInput | JoueurRoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JoueurRole"> | number
    joueur_id?: IntWithAggregatesFilter<"JoueurRole"> | number
    role_id?: IntWithAggregatesFilter<"JoueurRole"> | number
    created_at?: DateTimeWithAggregatesFilter<"JoueurRole"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"JoueurRole"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"JoueurRole"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"JoueurRole"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"JoueurRole"> | boolean
  }

  export type JoueurFunctionWhereInput = {
    AND?: JoueurFunctionWhereInput | JoueurFunctionWhereInput[]
    OR?: JoueurFunctionWhereInput[]
    NOT?: JoueurFunctionWhereInput | JoueurFunctionWhereInput[]
    id?: IntFilter<"JoueurFunction"> | number
    joueur_id?: IntFilter<"JoueurFunction"> | number
    function_id?: IntFilter<"JoueurFunction"> | number
    created_at?: DateTimeFilter<"JoueurFunction"> | Date | string
    updated_at?: DateTimeFilter<"JoueurFunction"> | Date | string
    created_by?: StringNullableFilter<"JoueurFunction"> | string | null
    updated_by?: StringNullableFilter<"JoueurFunction"> | string | null
    is_deleted?: BoolFilter<"JoueurFunction"> | boolean
    joueur?: XOR<JoueurScalarRelationFilter, JoueurWhereInput>
    function?: XOR<FunctionScalarRelationFilter, FunctionWhereInput>
  }

  export type JoueurFunctionOrderByWithRelationInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueur?: JoueurOrderByWithRelationInput
    function?: FunctionOrderByWithRelationInput
  }

  export type JoueurFunctionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    joueur_id_function_id?: JoueurFunctionJoueur_idFunction_idCompoundUniqueInput
    AND?: JoueurFunctionWhereInput | JoueurFunctionWhereInput[]
    OR?: JoueurFunctionWhereInput[]
    NOT?: JoueurFunctionWhereInput | JoueurFunctionWhereInput[]
    joueur_id?: IntFilter<"JoueurFunction"> | number
    function_id?: IntFilter<"JoueurFunction"> | number
    created_at?: DateTimeFilter<"JoueurFunction"> | Date | string
    updated_at?: DateTimeFilter<"JoueurFunction"> | Date | string
    created_by?: StringNullableFilter<"JoueurFunction"> | string | null
    updated_by?: StringNullableFilter<"JoueurFunction"> | string | null
    is_deleted?: BoolFilter<"JoueurFunction"> | boolean
    joueur?: XOR<JoueurScalarRelationFilter, JoueurWhereInput>
    function?: XOR<FunctionScalarRelationFilter, FunctionWhereInput>
  }, "id" | "joueur_id_function_id">

  export type JoueurFunctionOrderByWithAggregationInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: JoueurFunctionCountOrderByAggregateInput
    _avg?: JoueurFunctionAvgOrderByAggregateInput
    _max?: JoueurFunctionMaxOrderByAggregateInput
    _min?: JoueurFunctionMinOrderByAggregateInput
    _sum?: JoueurFunctionSumOrderByAggregateInput
  }

  export type JoueurFunctionScalarWhereWithAggregatesInput = {
    AND?: JoueurFunctionScalarWhereWithAggregatesInput | JoueurFunctionScalarWhereWithAggregatesInput[]
    OR?: JoueurFunctionScalarWhereWithAggregatesInput[]
    NOT?: JoueurFunctionScalarWhereWithAggregatesInput | JoueurFunctionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JoueurFunction"> | number
    joueur_id?: IntWithAggregatesFilter<"JoueurFunction"> | number
    function_id?: IntWithAggregatesFilter<"JoueurFunction"> | number
    created_at?: DateTimeWithAggregatesFilter<"JoueurFunction"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"JoueurFunction"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"JoueurFunction"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"JoueurFunction"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"JoueurFunction"> | boolean
  }

  export type JoueurAgrementWhereInput = {
    AND?: JoueurAgrementWhereInput | JoueurAgrementWhereInput[]
    OR?: JoueurAgrementWhereInput[]
    NOT?: JoueurAgrementWhereInput | JoueurAgrementWhereInput[]
    id?: IntFilter<"JoueurAgrement"> | number
    joueur_id?: IntFilter<"JoueurAgrement"> | number
    agrement_id?: IntFilter<"JoueurAgrement"> | number
    created_at?: DateTimeFilter<"JoueurAgrement"> | Date | string
    updated_at?: DateTimeFilter<"JoueurAgrement"> | Date | string
    created_by?: StringNullableFilter<"JoueurAgrement"> | string | null
    updated_by?: StringNullableFilter<"JoueurAgrement"> | string | null
    is_deleted?: BoolFilter<"JoueurAgrement"> | boolean
    joueur?: XOR<JoueurScalarRelationFilter, JoueurWhereInput>
    agrement?: XOR<AgrementScalarRelationFilter, AgrementWhereInput>
  }

  export type JoueurAgrementOrderByWithRelationInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    joueur?: JoueurOrderByWithRelationInput
    agrement?: AgrementOrderByWithRelationInput
  }

  export type JoueurAgrementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    joueur_id_agrement_id?: JoueurAgrementJoueur_idAgrement_idCompoundUniqueInput
    AND?: JoueurAgrementWhereInput | JoueurAgrementWhereInput[]
    OR?: JoueurAgrementWhereInput[]
    NOT?: JoueurAgrementWhereInput | JoueurAgrementWhereInput[]
    joueur_id?: IntFilter<"JoueurAgrement"> | number
    agrement_id?: IntFilter<"JoueurAgrement"> | number
    created_at?: DateTimeFilter<"JoueurAgrement"> | Date | string
    updated_at?: DateTimeFilter<"JoueurAgrement"> | Date | string
    created_by?: StringNullableFilter<"JoueurAgrement"> | string | null
    updated_by?: StringNullableFilter<"JoueurAgrement"> | string | null
    is_deleted?: BoolFilter<"JoueurAgrement"> | boolean
    joueur?: XOR<JoueurScalarRelationFilter, JoueurWhereInput>
    agrement?: XOR<AgrementScalarRelationFilter, AgrementWhereInput>
  }, "id" | "joueur_id_agrement_id">

  export type JoueurAgrementOrderByWithAggregationInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    is_deleted?: SortOrder
    _count?: JoueurAgrementCountOrderByAggregateInput
    _avg?: JoueurAgrementAvgOrderByAggregateInput
    _max?: JoueurAgrementMaxOrderByAggregateInput
    _min?: JoueurAgrementMinOrderByAggregateInput
    _sum?: JoueurAgrementSumOrderByAggregateInput
  }

  export type JoueurAgrementScalarWhereWithAggregatesInput = {
    AND?: JoueurAgrementScalarWhereWithAggregatesInput | JoueurAgrementScalarWhereWithAggregatesInput[]
    OR?: JoueurAgrementScalarWhereWithAggregatesInput[]
    NOT?: JoueurAgrementScalarWhereWithAggregatesInput | JoueurAgrementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JoueurAgrement"> | number
    joueur_id?: IntWithAggregatesFilter<"JoueurAgrement"> | number
    agrement_id?: IntWithAggregatesFilter<"JoueurAgrement"> | number
    created_at?: DateTimeWithAggregatesFilter<"JoueurAgrement"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"JoueurAgrement"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"JoueurAgrement"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"JoueurAgrement"> | string | null
    is_deleted?: BoolWithAggregatesFilter<"JoueurAgrement"> | boolean
  }

  export type ClubCreateInput = {
    nom: string
    code: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    site_web?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: number
    nom: string
    code: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    site_web?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    site_web?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    site_web?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: number
    nom: string
    code: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    site_web?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type ClubUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    site_web?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    site_web?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurCreateInput = {
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    club: ClubCreateNestedOneWithoutJoueursInput
    roles?: JoueurRoleCreateNestedManyWithoutJoueurInput
    functions?: JoueurFunctionCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    club_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    roles?: JoueurRoleUncheckedCreateNestedManyWithoutJoueurInput
    functions?: JoueurFunctionUncheckedCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    club?: ClubUpdateOneRequiredWithoutJoueursNestedInput
    roles?: JoueurRoleUpdateManyWithoutJoueurNestedInput
    functions?: JoueurFunctionUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    roles?: JoueurRoleUncheckedUpdateManyWithoutJoueurNestedInput
    functions?: JoueurFunctionUncheckedUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    club_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleCreateInput = {
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type RoleUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FunctionCreateInput = {
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurFunctionCreateNestedManyWithoutFunctionInput
  }

  export type FunctionUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurFunctionUncheckedCreateNestedManyWithoutFunctionInput
  }

  export type FunctionUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurFunctionUpdateManyWithoutFunctionNestedInput
  }

  export type FunctionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurFunctionUncheckedUpdateManyWithoutFunctionNestedInput
  }

  export type FunctionCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type FunctionUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FunctionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgrementCreateInput = {
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurAgrementCreateNestedManyWithoutAgrementInput
  }

  export type AgrementUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueurs?: JoueurAgrementUncheckedCreateNestedManyWithoutAgrementInput
  }

  export type AgrementUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurAgrementUpdateManyWithoutAgrementNestedInput
  }

  export type AgrementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueurs?: JoueurAgrementUncheckedUpdateManyWithoutAgrementNestedInput
  }

  export type AgrementCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type AgrementUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgrementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueur: JoueurCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutJoueursInput
  }

  export type JoueurRoleUncheckedCreateInput = {
    id?: number
    joueur_id: number
    role_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurRoleUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueur?: JoueurUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutJoueursNestedInput
  }

  export type JoueurRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleCreateManyInput = {
    id?: number
    joueur_id: number
    role_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurRoleUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueur: JoueurCreateNestedOneWithoutFunctionsInput
    function: FunctionCreateNestedOneWithoutJoueursInput
  }

  export type JoueurFunctionUncheckedCreateInput = {
    id?: number
    joueur_id: number
    function_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurFunctionUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueur?: JoueurUpdateOneRequiredWithoutFunctionsNestedInput
    function?: FunctionUpdateOneRequiredWithoutJoueursNestedInput
  }

  export type JoueurFunctionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    function_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionCreateManyInput = {
    id?: number
    joueur_id: number
    function_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurFunctionUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    function_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueur: JoueurCreateNestedOneWithoutAgrementsInput
    agrement: AgrementCreateNestedOneWithoutJoueursInput
  }

  export type JoueurAgrementUncheckedCreateInput = {
    id?: number
    joueur_id: number
    agrement_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurAgrementUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueur?: JoueurUpdateOneRequiredWithoutAgrementsNestedInput
    agrement?: AgrementUpdateOneRequiredWithoutJoueursNestedInput
  }

  export type JoueurAgrementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    agrement_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementCreateManyInput = {
    id?: number
    joueur_id: number
    agrement_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurAgrementUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    agrement_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type JoueurListRelationFilter = {
    every?: JoueurWhereInput
    some?: JoueurWhereInput
    none?: JoueurWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type JoueurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    code?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    site_web?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type ClubAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    code?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    site_web?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    code?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    site_web?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type ClubSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClubScalarRelationFilter = {
    is?: ClubWhereInput
    isNot?: ClubWhereInput
  }

  export type JoueurRoleListRelationFilter = {
    every?: JoueurRoleWhereInput
    some?: JoueurRoleWhereInput
    none?: JoueurRoleWhereInput
  }

  export type JoueurFunctionListRelationFilter = {
    every?: JoueurFunctionWhereInput
    some?: JoueurFunctionWhereInput
    none?: JoueurFunctionWhereInput
  }

  export type JoueurAgrementListRelationFilter = {
    every?: JoueurAgrementWhereInput
    some?: JoueurAgrementWhereInput
    none?: JoueurAgrementWhereInput
  }

  export type JoueurRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JoueurFunctionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JoueurAgrementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JoueurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    licence?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    date_naissance?: SortOrder
    club_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurAvgOrderByAggregateInput = {
    id?: SortOrder
    club_id?: SortOrder
  }

  export type JoueurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    licence?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    date_naissance?: SortOrder
    club_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    licence?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    date_naissance?: SortOrder
    club_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurSumOrderByAggregateInput = {
    id?: SortOrder
    club_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FunctionCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type FunctionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FunctionMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type FunctionMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type FunctionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AgrementCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type AgrementAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AgrementMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type AgrementMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type AgrementSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JoueurScalarRelationFilter = {
    is?: JoueurWhereInput
    isNot?: JoueurWhereInput
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type JoueurRoleJoueur_idRole_idCompoundUniqueInput = {
    joueur_id: number
    role_id: number
  }

  export type JoueurRoleCountOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurRoleAvgOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
  }

  export type JoueurRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurRoleMinOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurRoleSumOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    role_id?: SortOrder
  }

  export type FunctionScalarRelationFilter = {
    is?: FunctionWhereInput
    isNot?: FunctionWhereInput
  }

  export type JoueurFunctionJoueur_idFunction_idCompoundUniqueInput = {
    joueur_id: number
    function_id: number
  }

  export type JoueurFunctionCountOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurFunctionAvgOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
  }

  export type JoueurFunctionMaxOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurFunctionMinOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurFunctionSumOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    function_id?: SortOrder
  }

  export type AgrementScalarRelationFilter = {
    is?: AgrementWhereInput
    isNot?: AgrementWhereInput
  }

  export type JoueurAgrementJoueur_idAgrement_idCompoundUniqueInput = {
    joueur_id: number
    agrement_id: number
  }

  export type JoueurAgrementCountOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurAgrementAvgOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
  }

  export type JoueurAgrementMaxOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurAgrementMinOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    is_deleted?: SortOrder
  }

  export type JoueurAgrementSumOrderByAggregateInput = {
    id?: SortOrder
    joueur_id?: SortOrder
    agrement_id?: SortOrder
  }

  export type JoueurCreateNestedManyWithoutClubInput = {
    create?: XOR<JoueurCreateWithoutClubInput, JoueurUncheckedCreateWithoutClubInput> | JoueurCreateWithoutClubInput[] | JoueurUncheckedCreateWithoutClubInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutClubInput | JoueurCreateOrConnectWithoutClubInput[]
    createMany?: JoueurCreateManyClubInputEnvelope
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
  }

  export type JoueurUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<JoueurCreateWithoutClubInput, JoueurUncheckedCreateWithoutClubInput> | JoueurCreateWithoutClubInput[] | JoueurUncheckedCreateWithoutClubInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutClubInput | JoueurCreateOrConnectWithoutClubInput[]
    createMany?: JoueurCreateManyClubInputEnvelope
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type JoueurUpdateManyWithoutClubNestedInput = {
    create?: XOR<JoueurCreateWithoutClubInput, JoueurUncheckedCreateWithoutClubInput> | JoueurCreateWithoutClubInput[] | JoueurUncheckedCreateWithoutClubInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutClubInput | JoueurCreateOrConnectWithoutClubInput[]
    upsert?: JoueurUpsertWithWhereUniqueWithoutClubInput | JoueurUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: JoueurCreateManyClubInputEnvelope
    set?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    disconnect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    delete?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    update?: JoueurUpdateWithWhereUniqueWithoutClubInput | JoueurUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: JoueurUpdateManyWithWhereWithoutClubInput | JoueurUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JoueurUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<JoueurCreateWithoutClubInput, JoueurUncheckedCreateWithoutClubInput> | JoueurCreateWithoutClubInput[] | JoueurUncheckedCreateWithoutClubInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutClubInput | JoueurCreateOrConnectWithoutClubInput[]
    upsert?: JoueurUpsertWithWhereUniqueWithoutClubInput | JoueurUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: JoueurCreateManyClubInputEnvelope
    set?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    disconnect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    delete?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    update?: JoueurUpdateWithWhereUniqueWithoutClubInput | JoueurUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: JoueurUpdateManyWithWhereWithoutClubInput | JoueurUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
  }

  export type ClubCreateNestedOneWithoutJoueursInput = {
    create?: XOR<ClubCreateWithoutJoueursInput, ClubUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: ClubCreateOrConnectWithoutJoueursInput
    connect?: ClubWhereUniqueInput
  }

  export type JoueurRoleCreateNestedManyWithoutJoueurInput = {
    create?: XOR<JoueurRoleCreateWithoutJoueurInput, JoueurRoleUncheckedCreateWithoutJoueurInput> | JoueurRoleCreateWithoutJoueurInput[] | JoueurRoleUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutJoueurInput | JoueurRoleCreateOrConnectWithoutJoueurInput[]
    createMany?: JoueurRoleCreateManyJoueurInputEnvelope
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
  }

  export type JoueurFunctionCreateNestedManyWithoutJoueurInput = {
    create?: XOR<JoueurFunctionCreateWithoutJoueurInput, JoueurFunctionUncheckedCreateWithoutJoueurInput> | JoueurFunctionCreateWithoutJoueurInput[] | JoueurFunctionUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutJoueurInput | JoueurFunctionCreateOrConnectWithoutJoueurInput[]
    createMany?: JoueurFunctionCreateManyJoueurInputEnvelope
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
  }

  export type JoueurAgrementCreateNestedManyWithoutJoueurInput = {
    create?: XOR<JoueurAgrementCreateWithoutJoueurInput, JoueurAgrementUncheckedCreateWithoutJoueurInput> | JoueurAgrementCreateWithoutJoueurInput[] | JoueurAgrementUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutJoueurInput | JoueurAgrementCreateOrConnectWithoutJoueurInput[]
    createMany?: JoueurAgrementCreateManyJoueurInputEnvelope
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
  }

  export type JoueurRoleUncheckedCreateNestedManyWithoutJoueurInput = {
    create?: XOR<JoueurRoleCreateWithoutJoueurInput, JoueurRoleUncheckedCreateWithoutJoueurInput> | JoueurRoleCreateWithoutJoueurInput[] | JoueurRoleUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutJoueurInput | JoueurRoleCreateOrConnectWithoutJoueurInput[]
    createMany?: JoueurRoleCreateManyJoueurInputEnvelope
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
  }

  export type JoueurFunctionUncheckedCreateNestedManyWithoutJoueurInput = {
    create?: XOR<JoueurFunctionCreateWithoutJoueurInput, JoueurFunctionUncheckedCreateWithoutJoueurInput> | JoueurFunctionCreateWithoutJoueurInput[] | JoueurFunctionUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutJoueurInput | JoueurFunctionCreateOrConnectWithoutJoueurInput[]
    createMany?: JoueurFunctionCreateManyJoueurInputEnvelope
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
  }

  export type JoueurAgrementUncheckedCreateNestedManyWithoutJoueurInput = {
    create?: XOR<JoueurAgrementCreateWithoutJoueurInput, JoueurAgrementUncheckedCreateWithoutJoueurInput> | JoueurAgrementCreateWithoutJoueurInput[] | JoueurAgrementUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutJoueurInput | JoueurAgrementCreateOrConnectWithoutJoueurInput[]
    createMany?: JoueurAgrementCreateManyJoueurInputEnvelope
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClubUpdateOneRequiredWithoutJoueursNestedInput = {
    create?: XOR<ClubCreateWithoutJoueursInput, ClubUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: ClubCreateOrConnectWithoutJoueursInput
    upsert?: ClubUpsertWithoutJoueursInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutJoueursInput, ClubUpdateWithoutJoueursInput>, ClubUncheckedUpdateWithoutJoueursInput>
  }

  export type JoueurRoleUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<JoueurRoleCreateWithoutJoueurInput, JoueurRoleUncheckedCreateWithoutJoueurInput> | JoueurRoleCreateWithoutJoueurInput[] | JoueurRoleUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutJoueurInput | JoueurRoleCreateOrConnectWithoutJoueurInput[]
    upsert?: JoueurRoleUpsertWithWhereUniqueWithoutJoueurInput | JoueurRoleUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: JoueurRoleCreateManyJoueurInputEnvelope
    set?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    disconnect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    delete?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    update?: JoueurRoleUpdateWithWhereUniqueWithoutJoueurInput | JoueurRoleUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: JoueurRoleUpdateManyWithWhereWithoutJoueurInput | JoueurRoleUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: JoueurRoleScalarWhereInput | JoueurRoleScalarWhereInput[]
  }

  export type JoueurFunctionUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<JoueurFunctionCreateWithoutJoueurInput, JoueurFunctionUncheckedCreateWithoutJoueurInput> | JoueurFunctionCreateWithoutJoueurInput[] | JoueurFunctionUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutJoueurInput | JoueurFunctionCreateOrConnectWithoutJoueurInput[]
    upsert?: JoueurFunctionUpsertWithWhereUniqueWithoutJoueurInput | JoueurFunctionUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: JoueurFunctionCreateManyJoueurInputEnvelope
    set?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    disconnect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    delete?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    update?: JoueurFunctionUpdateWithWhereUniqueWithoutJoueurInput | JoueurFunctionUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: JoueurFunctionUpdateManyWithWhereWithoutJoueurInput | JoueurFunctionUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: JoueurFunctionScalarWhereInput | JoueurFunctionScalarWhereInput[]
  }

  export type JoueurAgrementUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<JoueurAgrementCreateWithoutJoueurInput, JoueurAgrementUncheckedCreateWithoutJoueurInput> | JoueurAgrementCreateWithoutJoueurInput[] | JoueurAgrementUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutJoueurInput | JoueurAgrementCreateOrConnectWithoutJoueurInput[]
    upsert?: JoueurAgrementUpsertWithWhereUniqueWithoutJoueurInput | JoueurAgrementUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: JoueurAgrementCreateManyJoueurInputEnvelope
    set?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    disconnect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    delete?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    update?: JoueurAgrementUpdateWithWhereUniqueWithoutJoueurInput | JoueurAgrementUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: JoueurAgrementUpdateManyWithWhereWithoutJoueurInput | JoueurAgrementUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: JoueurAgrementScalarWhereInput | JoueurAgrementScalarWhereInput[]
  }

  export type JoueurRoleUncheckedUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<JoueurRoleCreateWithoutJoueurInput, JoueurRoleUncheckedCreateWithoutJoueurInput> | JoueurRoleCreateWithoutJoueurInput[] | JoueurRoleUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutJoueurInput | JoueurRoleCreateOrConnectWithoutJoueurInput[]
    upsert?: JoueurRoleUpsertWithWhereUniqueWithoutJoueurInput | JoueurRoleUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: JoueurRoleCreateManyJoueurInputEnvelope
    set?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    disconnect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    delete?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    update?: JoueurRoleUpdateWithWhereUniqueWithoutJoueurInput | JoueurRoleUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: JoueurRoleUpdateManyWithWhereWithoutJoueurInput | JoueurRoleUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: JoueurRoleScalarWhereInput | JoueurRoleScalarWhereInput[]
  }

  export type JoueurFunctionUncheckedUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<JoueurFunctionCreateWithoutJoueurInput, JoueurFunctionUncheckedCreateWithoutJoueurInput> | JoueurFunctionCreateWithoutJoueurInput[] | JoueurFunctionUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutJoueurInput | JoueurFunctionCreateOrConnectWithoutJoueurInput[]
    upsert?: JoueurFunctionUpsertWithWhereUniqueWithoutJoueurInput | JoueurFunctionUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: JoueurFunctionCreateManyJoueurInputEnvelope
    set?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    disconnect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    delete?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    update?: JoueurFunctionUpdateWithWhereUniqueWithoutJoueurInput | JoueurFunctionUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: JoueurFunctionUpdateManyWithWhereWithoutJoueurInput | JoueurFunctionUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: JoueurFunctionScalarWhereInput | JoueurFunctionScalarWhereInput[]
  }

  export type JoueurAgrementUncheckedUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<JoueurAgrementCreateWithoutJoueurInput, JoueurAgrementUncheckedCreateWithoutJoueurInput> | JoueurAgrementCreateWithoutJoueurInput[] | JoueurAgrementUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutJoueurInput | JoueurAgrementCreateOrConnectWithoutJoueurInput[]
    upsert?: JoueurAgrementUpsertWithWhereUniqueWithoutJoueurInput | JoueurAgrementUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: JoueurAgrementCreateManyJoueurInputEnvelope
    set?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    disconnect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    delete?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    update?: JoueurAgrementUpdateWithWhereUniqueWithoutJoueurInput | JoueurAgrementUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: JoueurAgrementUpdateManyWithWhereWithoutJoueurInput | JoueurAgrementUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: JoueurAgrementScalarWhereInput | JoueurAgrementScalarWhereInput[]
  }

  export type JoueurRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<JoueurRoleCreateWithoutRoleInput, JoueurRoleUncheckedCreateWithoutRoleInput> | JoueurRoleCreateWithoutRoleInput[] | JoueurRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutRoleInput | JoueurRoleCreateOrConnectWithoutRoleInput[]
    createMany?: JoueurRoleCreateManyRoleInputEnvelope
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
  }

  export type JoueurRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<JoueurRoleCreateWithoutRoleInput, JoueurRoleUncheckedCreateWithoutRoleInput> | JoueurRoleCreateWithoutRoleInput[] | JoueurRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutRoleInput | JoueurRoleCreateOrConnectWithoutRoleInput[]
    createMany?: JoueurRoleCreateManyRoleInputEnvelope
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
  }

  export type JoueurRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<JoueurRoleCreateWithoutRoleInput, JoueurRoleUncheckedCreateWithoutRoleInput> | JoueurRoleCreateWithoutRoleInput[] | JoueurRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutRoleInput | JoueurRoleCreateOrConnectWithoutRoleInput[]
    upsert?: JoueurRoleUpsertWithWhereUniqueWithoutRoleInput | JoueurRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: JoueurRoleCreateManyRoleInputEnvelope
    set?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    disconnect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    delete?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    update?: JoueurRoleUpdateWithWhereUniqueWithoutRoleInput | JoueurRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: JoueurRoleUpdateManyWithWhereWithoutRoleInput | JoueurRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: JoueurRoleScalarWhereInput | JoueurRoleScalarWhereInput[]
  }

  export type JoueurRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<JoueurRoleCreateWithoutRoleInput, JoueurRoleUncheckedCreateWithoutRoleInput> | JoueurRoleCreateWithoutRoleInput[] | JoueurRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: JoueurRoleCreateOrConnectWithoutRoleInput | JoueurRoleCreateOrConnectWithoutRoleInput[]
    upsert?: JoueurRoleUpsertWithWhereUniqueWithoutRoleInput | JoueurRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: JoueurRoleCreateManyRoleInputEnvelope
    set?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    disconnect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    delete?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    connect?: JoueurRoleWhereUniqueInput | JoueurRoleWhereUniqueInput[]
    update?: JoueurRoleUpdateWithWhereUniqueWithoutRoleInput | JoueurRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: JoueurRoleUpdateManyWithWhereWithoutRoleInput | JoueurRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: JoueurRoleScalarWhereInput | JoueurRoleScalarWhereInput[]
  }

  export type JoueurFunctionCreateNestedManyWithoutFunctionInput = {
    create?: XOR<JoueurFunctionCreateWithoutFunctionInput, JoueurFunctionUncheckedCreateWithoutFunctionInput> | JoueurFunctionCreateWithoutFunctionInput[] | JoueurFunctionUncheckedCreateWithoutFunctionInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutFunctionInput | JoueurFunctionCreateOrConnectWithoutFunctionInput[]
    createMany?: JoueurFunctionCreateManyFunctionInputEnvelope
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
  }

  export type JoueurFunctionUncheckedCreateNestedManyWithoutFunctionInput = {
    create?: XOR<JoueurFunctionCreateWithoutFunctionInput, JoueurFunctionUncheckedCreateWithoutFunctionInput> | JoueurFunctionCreateWithoutFunctionInput[] | JoueurFunctionUncheckedCreateWithoutFunctionInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutFunctionInput | JoueurFunctionCreateOrConnectWithoutFunctionInput[]
    createMany?: JoueurFunctionCreateManyFunctionInputEnvelope
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
  }

  export type JoueurFunctionUpdateManyWithoutFunctionNestedInput = {
    create?: XOR<JoueurFunctionCreateWithoutFunctionInput, JoueurFunctionUncheckedCreateWithoutFunctionInput> | JoueurFunctionCreateWithoutFunctionInput[] | JoueurFunctionUncheckedCreateWithoutFunctionInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutFunctionInput | JoueurFunctionCreateOrConnectWithoutFunctionInput[]
    upsert?: JoueurFunctionUpsertWithWhereUniqueWithoutFunctionInput | JoueurFunctionUpsertWithWhereUniqueWithoutFunctionInput[]
    createMany?: JoueurFunctionCreateManyFunctionInputEnvelope
    set?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    disconnect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    delete?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    update?: JoueurFunctionUpdateWithWhereUniqueWithoutFunctionInput | JoueurFunctionUpdateWithWhereUniqueWithoutFunctionInput[]
    updateMany?: JoueurFunctionUpdateManyWithWhereWithoutFunctionInput | JoueurFunctionUpdateManyWithWhereWithoutFunctionInput[]
    deleteMany?: JoueurFunctionScalarWhereInput | JoueurFunctionScalarWhereInput[]
  }

  export type JoueurFunctionUncheckedUpdateManyWithoutFunctionNestedInput = {
    create?: XOR<JoueurFunctionCreateWithoutFunctionInput, JoueurFunctionUncheckedCreateWithoutFunctionInput> | JoueurFunctionCreateWithoutFunctionInput[] | JoueurFunctionUncheckedCreateWithoutFunctionInput[]
    connectOrCreate?: JoueurFunctionCreateOrConnectWithoutFunctionInput | JoueurFunctionCreateOrConnectWithoutFunctionInput[]
    upsert?: JoueurFunctionUpsertWithWhereUniqueWithoutFunctionInput | JoueurFunctionUpsertWithWhereUniqueWithoutFunctionInput[]
    createMany?: JoueurFunctionCreateManyFunctionInputEnvelope
    set?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    disconnect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    delete?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    connect?: JoueurFunctionWhereUniqueInput | JoueurFunctionWhereUniqueInput[]
    update?: JoueurFunctionUpdateWithWhereUniqueWithoutFunctionInput | JoueurFunctionUpdateWithWhereUniqueWithoutFunctionInput[]
    updateMany?: JoueurFunctionUpdateManyWithWhereWithoutFunctionInput | JoueurFunctionUpdateManyWithWhereWithoutFunctionInput[]
    deleteMany?: JoueurFunctionScalarWhereInput | JoueurFunctionScalarWhereInput[]
  }

  export type JoueurAgrementCreateNestedManyWithoutAgrementInput = {
    create?: XOR<JoueurAgrementCreateWithoutAgrementInput, JoueurAgrementUncheckedCreateWithoutAgrementInput> | JoueurAgrementCreateWithoutAgrementInput[] | JoueurAgrementUncheckedCreateWithoutAgrementInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutAgrementInput | JoueurAgrementCreateOrConnectWithoutAgrementInput[]
    createMany?: JoueurAgrementCreateManyAgrementInputEnvelope
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
  }

  export type JoueurAgrementUncheckedCreateNestedManyWithoutAgrementInput = {
    create?: XOR<JoueurAgrementCreateWithoutAgrementInput, JoueurAgrementUncheckedCreateWithoutAgrementInput> | JoueurAgrementCreateWithoutAgrementInput[] | JoueurAgrementUncheckedCreateWithoutAgrementInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutAgrementInput | JoueurAgrementCreateOrConnectWithoutAgrementInput[]
    createMany?: JoueurAgrementCreateManyAgrementInputEnvelope
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
  }

  export type JoueurAgrementUpdateManyWithoutAgrementNestedInput = {
    create?: XOR<JoueurAgrementCreateWithoutAgrementInput, JoueurAgrementUncheckedCreateWithoutAgrementInput> | JoueurAgrementCreateWithoutAgrementInput[] | JoueurAgrementUncheckedCreateWithoutAgrementInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutAgrementInput | JoueurAgrementCreateOrConnectWithoutAgrementInput[]
    upsert?: JoueurAgrementUpsertWithWhereUniqueWithoutAgrementInput | JoueurAgrementUpsertWithWhereUniqueWithoutAgrementInput[]
    createMany?: JoueurAgrementCreateManyAgrementInputEnvelope
    set?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    disconnect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    delete?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    update?: JoueurAgrementUpdateWithWhereUniqueWithoutAgrementInput | JoueurAgrementUpdateWithWhereUniqueWithoutAgrementInput[]
    updateMany?: JoueurAgrementUpdateManyWithWhereWithoutAgrementInput | JoueurAgrementUpdateManyWithWhereWithoutAgrementInput[]
    deleteMany?: JoueurAgrementScalarWhereInput | JoueurAgrementScalarWhereInput[]
  }

  export type JoueurAgrementUncheckedUpdateManyWithoutAgrementNestedInput = {
    create?: XOR<JoueurAgrementCreateWithoutAgrementInput, JoueurAgrementUncheckedCreateWithoutAgrementInput> | JoueurAgrementCreateWithoutAgrementInput[] | JoueurAgrementUncheckedCreateWithoutAgrementInput[]
    connectOrCreate?: JoueurAgrementCreateOrConnectWithoutAgrementInput | JoueurAgrementCreateOrConnectWithoutAgrementInput[]
    upsert?: JoueurAgrementUpsertWithWhereUniqueWithoutAgrementInput | JoueurAgrementUpsertWithWhereUniqueWithoutAgrementInput[]
    createMany?: JoueurAgrementCreateManyAgrementInputEnvelope
    set?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    disconnect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    delete?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    connect?: JoueurAgrementWhereUniqueInput | JoueurAgrementWhereUniqueInput[]
    update?: JoueurAgrementUpdateWithWhereUniqueWithoutAgrementInput | JoueurAgrementUpdateWithWhereUniqueWithoutAgrementInput[]
    updateMany?: JoueurAgrementUpdateManyWithWhereWithoutAgrementInput | JoueurAgrementUpdateManyWithWhereWithoutAgrementInput[]
    deleteMany?: JoueurAgrementScalarWhereInput | JoueurAgrementScalarWhereInput[]
  }

  export type JoueurCreateNestedOneWithoutRolesInput = {
    create?: XOR<JoueurCreateWithoutRolesInput, JoueurUncheckedCreateWithoutRolesInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutRolesInput
    connect?: JoueurWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutJoueursInput = {
    create?: XOR<RoleCreateWithoutJoueursInput, RoleUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: RoleCreateOrConnectWithoutJoueursInput
    connect?: RoleWhereUniqueInput
  }

  export type JoueurUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<JoueurCreateWithoutRolesInput, JoueurUncheckedCreateWithoutRolesInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutRolesInput
    upsert?: JoueurUpsertWithoutRolesInput
    connect?: JoueurWhereUniqueInput
    update?: XOR<XOR<JoueurUpdateToOneWithWhereWithoutRolesInput, JoueurUpdateWithoutRolesInput>, JoueurUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutJoueursNestedInput = {
    create?: XOR<RoleCreateWithoutJoueursInput, RoleUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: RoleCreateOrConnectWithoutJoueursInput
    upsert?: RoleUpsertWithoutJoueursInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutJoueursInput, RoleUpdateWithoutJoueursInput>, RoleUncheckedUpdateWithoutJoueursInput>
  }

  export type JoueurCreateNestedOneWithoutFunctionsInput = {
    create?: XOR<JoueurCreateWithoutFunctionsInput, JoueurUncheckedCreateWithoutFunctionsInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutFunctionsInput
    connect?: JoueurWhereUniqueInput
  }

  export type FunctionCreateNestedOneWithoutJoueursInput = {
    create?: XOR<FunctionCreateWithoutJoueursInput, FunctionUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: FunctionCreateOrConnectWithoutJoueursInput
    connect?: FunctionWhereUniqueInput
  }

  export type JoueurUpdateOneRequiredWithoutFunctionsNestedInput = {
    create?: XOR<JoueurCreateWithoutFunctionsInput, JoueurUncheckedCreateWithoutFunctionsInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutFunctionsInput
    upsert?: JoueurUpsertWithoutFunctionsInput
    connect?: JoueurWhereUniqueInput
    update?: XOR<XOR<JoueurUpdateToOneWithWhereWithoutFunctionsInput, JoueurUpdateWithoutFunctionsInput>, JoueurUncheckedUpdateWithoutFunctionsInput>
  }

  export type FunctionUpdateOneRequiredWithoutJoueursNestedInput = {
    create?: XOR<FunctionCreateWithoutJoueursInput, FunctionUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: FunctionCreateOrConnectWithoutJoueursInput
    upsert?: FunctionUpsertWithoutJoueursInput
    connect?: FunctionWhereUniqueInput
    update?: XOR<XOR<FunctionUpdateToOneWithWhereWithoutJoueursInput, FunctionUpdateWithoutJoueursInput>, FunctionUncheckedUpdateWithoutJoueursInput>
  }

  export type JoueurCreateNestedOneWithoutAgrementsInput = {
    create?: XOR<JoueurCreateWithoutAgrementsInput, JoueurUncheckedCreateWithoutAgrementsInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutAgrementsInput
    connect?: JoueurWhereUniqueInput
  }

  export type AgrementCreateNestedOneWithoutJoueursInput = {
    create?: XOR<AgrementCreateWithoutJoueursInput, AgrementUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: AgrementCreateOrConnectWithoutJoueursInput
    connect?: AgrementWhereUniqueInput
  }

  export type JoueurUpdateOneRequiredWithoutAgrementsNestedInput = {
    create?: XOR<JoueurCreateWithoutAgrementsInput, JoueurUncheckedCreateWithoutAgrementsInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutAgrementsInput
    upsert?: JoueurUpsertWithoutAgrementsInput
    connect?: JoueurWhereUniqueInput
    update?: XOR<XOR<JoueurUpdateToOneWithWhereWithoutAgrementsInput, JoueurUpdateWithoutAgrementsInput>, JoueurUncheckedUpdateWithoutAgrementsInput>
  }

  export type AgrementUpdateOneRequiredWithoutJoueursNestedInput = {
    create?: XOR<AgrementCreateWithoutJoueursInput, AgrementUncheckedCreateWithoutJoueursInput>
    connectOrCreate?: AgrementCreateOrConnectWithoutJoueursInput
    upsert?: AgrementUpsertWithoutJoueursInput
    connect?: AgrementWhereUniqueInput
    update?: XOR<XOR<AgrementUpdateToOneWithWhereWithoutJoueursInput, AgrementUpdateWithoutJoueursInput>, AgrementUncheckedUpdateWithoutJoueursInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type JoueurCreateWithoutClubInput = {
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    roles?: JoueurRoleCreateNestedManyWithoutJoueurInput
    functions?: JoueurFunctionCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateWithoutClubInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    roles?: JoueurRoleUncheckedCreateNestedManyWithoutJoueurInput
    functions?: JoueurFunctionUncheckedCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurCreateOrConnectWithoutClubInput = {
    where: JoueurWhereUniqueInput
    create: XOR<JoueurCreateWithoutClubInput, JoueurUncheckedCreateWithoutClubInput>
  }

  export type JoueurCreateManyClubInputEnvelope = {
    data: JoueurCreateManyClubInput | JoueurCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type JoueurUpsertWithWhereUniqueWithoutClubInput = {
    where: JoueurWhereUniqueInput
    update: XOR<JoueurUpdateWithoutClubInput, JoueurUncheckedUpdateWithoutClubInput>
    create: XOR<JoueurCreateWithoutClubInput, JoueurUncheckedCreateWithoutClubInput>
  }

  export type JoueurUpdateWithWhereUniqueWithoutClubInput = {
    where: JoueurWhereUniqueInput
    data: XOR<JoueurUpdateWithoutClubInput, JoueurUncheckedUpdateWithoutClubInput>
  }

  export type JoueurUpdateManyWithWhereWithoutClubInput = {
    where: JoueurScalarWhereInput
    data: XOR<JoueurUpdateManyMutationInput, JoueurUncheckedUpdateManyWithoutClubInput>
  }

  export type JoueurScalarWhereInput = {
    AND?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
    OR?: JoueurScalarWhereInput[]
    NOT?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
    id?: IntFilter<"Joueur"> | number
    nom?: StringFilter<"Joueur"> | string
    prenom?: StringFilter<"Joueur"> | string
    licence?: StringFilter<"Joueur"> | string
    email?: StringNullableFilter<"Joueur"> | string | null
    telephone?: StringNullableFilter<"Joueur"> | string | null
    date_naissance?: DateTimeNullableFilter<"Joueur"> | Date | string | null
    club_id?: IntFilter<"Joueur"> | number
    created_at?: DateTimeFilter<"Joueur"> | Date | string
    updated_at?: DateTimeFilter<"Joueur"> | Date | string
    created_by?: StringNullableFilter<"Joueur"> | string | null
    updated_by?: StringNullableFilter<"Joueur"> | string | null
    is_deleted?: BoolFilter<"Joueur"> | boolean
  }

  export type ClubCreateWithoutJoueursInput = {
    nom: string
    code: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    site_web?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type ClubUncheckedCreateWithoutJoueursInput = {
    id?: number
    nom: string
    code: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    site_web?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type ClubCreateOrConnectWithoutJoueursInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutJoueursInput, ClubUncheckedCreateWithoutJoueursInput>
  }

  export type JoueurRoleCreateWithoutJoueurInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    role: RoleCreateNestedOneWithoutJoueursInput
  }

  export type JoueurRoleUncheckedCreateWithoutJoueurInput = {
    id?: number
    role_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurRoleCreateOrConnectWithoutJoueurInput = {
    where: JoueurRoleWhereUniqueInput
    create: XOR<JoueurRoleCreateWithoutJoueurInput, JoueurRoleUncheckedCreateWithoutJoueurInput>
  }

  export type JoueurRoleCreateManyJoueurInputEnvelope = {
    data: JoueurRoleCreateManyJoueurInput | JoueurRoleCreateManyJoueurInput[]
    skipDuplicates?: boolean
  }

  export type JoueurFunctionCreateWithoutJoueurInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    function: FunctionCreateNestedOneWithoutJoueursInput
  }

  export type JoueurFunctionUncheckedCreateWithoutJoueurInput = {
    id?: number
    function_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurFunctionCreateOrConnectWithoutJoueurInput = {
    where: JoueurFunctionWhereUniqueInput
    create: XOR<JoueurFunctionCreateWithoutJoueurInput, JoueurFunctionUncheckedCreateWithoutJoueurInput>
  }

  export type JoueurFunctionCreateManyJoueurInputEnvelope = {
    data: JoueurFunctionCreateManyJoueurInput | JoueurFunctionCreateManyJoueurInput[]
    skipDuplicates?: boolean
  }

  export type JoueurAgrementCreateWithoutJoueurInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    agrement: AgrementCreateNestedOneWithoutJoueursInput
  }

  export type JoueurAgrementUncheckedCreateWithoutJoueurInput = {
    id?: number
    agrement_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurAgrementCreateOrConnectWithoutJoueurInput = {
    where: JoueurAgrementWhereUniqueInput
    create: XOR<JoueurAgrementCreateWithoutJoueurInput, JoueurAgrementUncheckedCreateWithoutJoueurInput>
  }

  export type JoueurAgrementCreateManyJoueurInputEnvelope = {
    data: JoueurAgrementCreateManyJoueurInput | JoueurAgrementCreateManyJoueurInput[]
    skipDuplicates?: boolean
  }

  export type ClubUpsertWithoutJoueursInput = {
    update: XOR<ClubUpdateWithoutJoueursInput, ClubUncheckedUpdateWithoutJoueursInput>
    create: XOR<ClubCreateWithoutJoueursInput, ClubUncheckedCreateWithoutJoueursInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutJoueursInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutJoueursInput, ClubUncheckedUpdateWithoutJoueursInput>
  }

  export type ClubUpdateWithoutJoueursInput = {
    nom?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    site_web?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClubUncheckedUpdateWithoutJoueursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    site_web?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleUpsertWithWhereUniqueWithoutJoueurInput = {
    where: JoueurRoleWhereUniqueInput
    update: XOR<JoueurRoleUpdateWithoutJoueurInput, JoueurRoleUncheckedUpdateWithoutJoueurInput>
    create: XOR<JoueurRoleCreateWithoutJoueurInput, JoueurRoleUncheckedCreateWithoutJoueurInput>
  }

  export type JoueurRoleUpdateWithWhereUniqueWithoutJoueurInput = {
    where: JoueurRoleWhereUniqueInput
    data: XOR<JoueurRoleUpdateWithoutJoueurInput, JoueurRoleUncheckedUpdateWithoutJoueurInput>
  }

  export type JoueurRoleUpdateManyWithWhereWithoutJoueurInput = {
    where: JoueurRoleScalarWhereInput
    data: XOR<JoueurRoleUpdateManyMutationInput, JoueurRoleUncheckedUpdateManyWithoutJoueurInput>
  }

  export type JoueurRoleScalarWhereInput = {
    AND?: JoueurRoleScalarWhereInput | JoueurRoleScalarWhereInput[]
    OR?: JoueurRoleScalarWhereInput[]
    NOT?: JoueurRoleScalarWhereInput | JoueurRoleScalarWhereInput[]
    id?: IntFilter<"JoueurRole"> | number
    joueur_id?: IntFilter<"JoueurRole"> | number
    role_id?: IntFilter<"JoueurRole"> | number
    created_at?: DateTimeFilter<"JoueurRole"> | Date | string
    updated_at?: DateTimeFilter<"JoueurRole"> | Date | string
    created_by?: StringNullableFilter<"JoueurRole"> | string | null
    updated_by?: StringNullableFilter<"JoueurRole"> | string | null
    is_deleted?: BoolFilter<"JoueurRole"> | boolean
  }

  export type JoueurFunctionUpsertWithWhereUniqueWithoutJoueurInput = {
    where: JoueurFunctionWhereUniqueInput
    update: XOR<JoueurFunctionUpdateWithoutJoueurInput, JoueurFunctionUncheckedUpdateWithoutJoueurInput>
    create: XOR<JoueurFunctionCreateWithoutJoueurInput, JoueurFunctionUncheckedCreateWithoutJoueurInput>
  }

  export type JoueurFunctionUpdateWithWhereUniqueWithoutJoueurInput = {
    where: JoueurFunctionWhereUniqueInput
    data: XOR<JoueurFunctionUpdateWithoutJoueurInput, JoueurFunctionUncheckedUpdateWithoutJoueurInput>
  }

  export type JoueurFunctionUpdateManyWithWhereWithoutJoueurInput = {
    where: JoueurFunctionScalarWhereInput
    data: XOR<JoueurFunctionUpdateManyMutationInput, JoueurFunctionUncheckedUpdateManyWithoutJoueurInput>
  }

  export type JoueurFunctionScalarWhereInput = {
    AND?: JoueurFunctionScalarWhereInput | JoueurFunctionScalarWhereInput[]
    OR?: JoueurFunctionScalarWhereInput[]
    NOT?: JoueurFunctionScalarWhereInput | JoueurFunctionScalarWhereInput[]
    id?: IntFilter<"JoueurFunction"> | number
    joueur_id?: IntFilter<"JoueurFunction"> | number
    function_id?: IntFilter<"JoueurFunction"> | number
    created_at?: DateTimeFilter<"JoueurFunction"> | Date | string
    updated_at?: DateTimeFilter<"JoueurFunction"> | Date | string
    created_by?: StringNullableFilter<"JoueurFunction"> | string | null
    updated_by?: StringNullableFilter<"JoueurFunction"> | string | null
    is_deleted?: BoolFilter<"JoueurFunction"> | boolean
  }

  export type JoueurAgrementUpsertWithWhereUniqueWithoutJoueurInput = {
    where: JoueurAgrementWhereUniqueInput
    update: XOR<JoueurAgrementUpdateWithoutJoueurInput, JoueurAgrementUncheckedUpdateWithoutJoueurInput>
    create: XOR<JoueurAgrementCreateWithoutJoueurInput, JoueurAgrementUncheckedCreateWithoutJoueurInput>
  }

  export type JoueurAgrementUpdateWithWhereUniqueWithoutJoueurInput = {
    where: JoueurAgrementWhereUniqueInput
    data: XOR<JoueurAgrementUpdateWithoutJoueurInput, JoueurAgrementUncheckedUpdateWithoutJoueurInput>
  }

  export type JoueurAgrementUpdateManyWithWhereWithoutJoueurInput = {
    where: JoueurAgrementScalarWhereInput
    data: XOR<JoueurAgrementUpdateManyMutationInput, JoueurAgrementUncheckedUpdateManyWithoutJoueurInput>
  }

  export type JoueurAgrementScalarWhereInput = {
    AND?: JoueurAgrementScalarWhereInput | JoueurAgrementScalarWhereInput[]
    OR?: JoueurAgrementScalarWhereInput[]
    NOT?: JoueurAgrementScalarWhereInput | JoueurAgrementScalarWhereInput[]
    id?: IntFilter<"JoueurAgrement"> | number
    joueur_id?: IntFilter<"JoueurAgrement"> | number
    agrement_id?: IntFilter<"JoueurAgrement"> | number
    created_at?: DateTimeFilter<"JoueurAgrement"> | Date | string
    updated_at?: DateTimeFilter<"JoueurAgrement"> | Date | string
    created_by?: StringNullableFilter<"JoueurAgrement"> | string | null
    updated_by?: StringNullableFilter<"JoueurAgrement"> | string | null
    is_deleted?: BoolFilter<"JoueurAgrement"> | boolean
  }

  export type JoueurRoleCreateWithoutRoleInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueur: JoueurCreateNestedOneWithoutRolesInput
  }

  export type JoueurRoleUncheckedCreateWithoutRoleInput = {
    id?: number
    joueur_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurRoleCreateOrConnectWithoutRoleInput = {
    where: JoueurRoleWhereUniqueInput
    create: XOR<JoueurRoleCreateWithoutRoleInput, JoueurRoleUncheckedCreateWithoutRoleInput>
  }

  export type JoueurRoleCreateManyRoleInputEnvelope = {
    data: JoueurRoleCreateManyRoleInput | JoueurRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type JoueurRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: JoueurRoleWhereUniqueInput
    update: XOR<JoueurRoleUpdateWithoutRoleInput, JoueurRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<JoueurRoleCreateWithoutRoleInput, JoueurRoleUncheckedCreateWithoutRoleInput>
  }

  export type JoueurRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: JoueurRoleWhereUniqueInput
    data: XOR<JoueurRoleUpdateWithoutRoleInput, JoueurRoleUncheckedUpdateWithoutRoleInput>
  }

  export type JoueurRoleUpdateManyWithWhereWithoutRoleInput = {
    where: JoueurRoleScalarWhereInput
    data: XOR<JoueurRoleUpdateManyMutationInput, JoueurRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type JoueurFunctionCreateWithoutFunctionInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueur: JoueurCreateNestedOneWithoutFunctionsInput
  }

  export type JoueurFunctionUncheckedCreateWithoutFunctionInput = {
    id?: number
    joueur_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurFunctionCreateOrConnectWithoutFunctionInput = {
    where: JoueurFunctionWhereUniqueInput
    create: XOR<JoueurFunctionCreateWithoutFunctionInput, JoueurFunctionUncheckedCreateWithoutFunctionInput>
  }

  export type JoueurFunctionCreateManyFunctionInputEnvelope = {
    data: JoueurFunctionCreateManyFunctionInput | JoueurFunctionCreateManyFunctionInput[]
    skipDuplicates?: boolean
  }

  export type JoueurFunctionUpsertWithWhereUniqueWithoutFunctionInput = {
    where: JoueurFunctionWhereUniqueInput
    update: XOR<JoueurFunctionUpdateWithoutFunctionInput, JoueurFunctionUncheckedUpdateWithoutFunctionInput>
    create: XOR<JoueurFunctionCreateWithoutFunctionInput, JoueurFunctionUncheckedCreateWithoutFunctionInput>
  }

  export type JoueurFunctionUpdateWithWhereUniqueWithoutFunctionInput = {
    where: JoueurFunctionWhereUniqueInput
    data: XOR<JoueurFunctionUpdateWithoutFunctionInput, JoueurFunctionUncheckedUpdateWithoutFunctionInput>
  }

  export type JoueurFunctionUpdateManyWithWhereWithoutFunctionInput = {
    where: JoueurFunctionScalarWhereInput
    data: XOR<JoueurFunctionUpdateManyMutationInput, JoueurFunctionUncheckedUpdateManyWithoutFunctionInput>
  }

  export type JoueurAgrementCreateWithoutAgrementInput = {
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    joueur: JoueurCreateNestedOneWithoutAgrementsInput
  }

  export type JoueurAgrementUncheckedCreateWithoutAgrementInput = {
    id?: number
    joueur_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurAgrementCreateOrConnectWithoutAgrementInput = {
    where: JoueurAgrementWhereUniqueInput
    create: XOR<JoueurAgrementCreateWithoutAgrementInput, JoueurAgrementUncheckedCreateWithoutAgrementInput>
  }

  export type JoueurAgrementCreateManyAgrementInputEnvelope = {
    data: JoueurAgrementCreateManyAgrementInput | JoueurAgrementCreateManyAgrementInput[]
    skipDuplicates?: boolean
  }

  export type JoueurAgrementUpsertWithWhereUniqueWithoutAgrementInput = {
    where: JoueurAgrementWhereUniqueInput
    update: XOR<JoueurAgrementUpdateWithoutAgrementInput, JoueurAgrementUncheckedUpdateWithoutAgrementInput>
    create: XOR<JoueurAgrementCreateWithoutAgrementInput, JoueurAgrementUncheckedCreateWithoutAgrementInput>
  }

  export type JoueurAgrementUpdateWithWhereUniqueWithoutAgrementInput = {
    where: JoueurAgrementWhereUniqueInput
    data: XOR<JoueurAgrementUpdateWithoutAgrementInput, JoueurAgrementUncheckedUpdateWithoutAgrementInput>
  }

  export type JoueurAgrementUpdateManyWithWhereWithoutAgrementInput = {
    where: JoueurAgrementScalarWhereInput
    data: XOR<JoueurAgrementUpdateManyMutationInput, JoueurAgrementUncheckedUpdateManyWithoutAgrementInput>
  }

  export type JoueurCreateWithoutRolesInput = {
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    club: ClubCreateNestedOneWithoutJoueursInput
    functions?: JoueurFunctionCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateWithoutRolesInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    club_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    functions?: JoueurFunctionUncheckedCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurCreateOrConnectWithoutRolesInput = {
    where: JoueurWhereUniqueInput
    create: XOR<JoueurCreateWithoutRolesInput, JoueurUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutJoueursInput = {
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type RoleUncheckedCreateWithoutJoueursInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type RoleCreateOrConnectWithoutJoueursInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutJoueursInput, RoleUncheckedCreateWithoutJoueursInput>
  }

  export type JoueurUpsertWithoutRolesInput = {
    update: XOR<JoueurUpdateWithoutRolesInput, JoueurUncheckedUpdateWithoutRolesInput>
    create: XOR<JoueurCreateWithoutRolesInput, JoueurUncheckedCreateWithoutRolesInput>
    where?: JoueurWhereInput
  }

  export type JoueurUpdateToOneWithWhereWithoutRolesInput = {
    where?: JoueurWhereInput
    data: XOR<JoueurUpdateWithoutRolesInput, JoueurUncheckedUpdateWithoutRolesInput>
  }

  export type JoueurUpdateWithoutRolesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    club?: ClubUpdateOneRequiredWithoutJoueursNestedInput
    functions?: JoueurFunctionUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    functions?: JoueurFunctionUncheckedUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type RoleUpsertWithoutJoueursInput = {
    update: XOR<RoleUpdateWithoutJoueursInput, RoleUncheckedUpdateWithoutJoueursInput>
    create: XOR<RoleCreateWithoutJoueursInput, RoleUncheckedCreateWithoutJoueursInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutJoueursInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutJoueursInput, RoleUncheckedUpdateWithoutJoueursInput>
  }

  export type RoleUpdateWithoutJoueursInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleUncheckedUpdateWithoutJoueursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurCreateWithoutFunctionsInput = {
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    club: ClubCreateNestedOneWithoutJoueursInput
    roles?: JoueurRoleCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateWithoutFunctionsInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    club_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    roles?: JoueurRoleUncheckedCreateNestedManyWithoutJoueurInput
    agrements?: JoueurAgrementUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurCreateOrConnectWithoutFunctionsInput = {
    where: JoueurWhereUniqueInput
    create: XOR<JoueurCreateWithoutFunctionsInput, JoueurUncheckedCreateWithoutFunctionsInput>
  }

  export type FunctionCreateWithoutJoueursInput = {
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type FunctionUncheckedCreateWithoutJoueursInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type FunctionCreateOrConnectWithoutJoueursInput = {
    where: FunctionWhereUniqueInput
    create: XOR<FunctionCreateWithoutJoueursInput, FunctionUncheckedCreateWithoutJoueursInput>
  }

  export type JoueurUpsertWithoutFunctionsInput = {
    update: XOR<JoueurUpdateWithoutFunctionsInput, JoueurUncheckedUpdateWithoutFunctionsInput>
    create: XOR<JoueurCreateWithoutFunctionsInput, JoueurUncheckedCreateWithoutFunctionsInput>
    where?: JoueurWhereInput
  }

  export type JoueurUpdateToOneWithWhereWithoutFunctionsInput = {
    where?: JoueurWhereInput
    data: XOR<JoueurUpdateWithoutFunctionsInput, JoueurUncheckedUpdateWithoutFunctionsInput>
  }

  export type JoueurUpdateWithoutFunctionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    club?: ClubUpdateOneRequiredWithoutJoueursNestedInput
    roles?: JoueurRoleUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateWithoutFunctionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    roles?: JoueurRoleUncheckedUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type FunctionUpsertWithoutJoueursInput = {
    update: XOR<FunctionUpdateWithoutJoueursInput, FunctionUncheckedUpdateWithoutJoueursInput>
    create: XOR<FunctionCreateWithoutJoueursInput, FunctionUncheckedCreateWithoutJoueursInput>
    where?: FunctionWhereInput
  }

  export type FunctionUpdateToOneWithWhereWithoutJoueursInput = {
    where?: FunctionWhereInput
    data: XOR<FunctionUpdateWithoutJoueursInput, FunctionUncheckedUpdateWithoutJoueursInput>
  }

  export type FunctionUpdateWithoutJoueursInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FunctionUncheckedUpdateWithoutJoueursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurCreateWithoutAgrementsInput = {
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    club: ClubCreateNestedOneWithoutJoueursInput
    roles?: JoueurRoleCreateNestedManyWithoutJoueurInput
    functions?: JoueurFunctionCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateWithoutAgrementsInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    club_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
    roles?: JoueurRoleUncheckedCreateNestedManyWithoutJoueurInput
    functions?: JoueurFunctionUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurCreateOrConnectWithoutAgrementsInput = {
    where: JoueurWhereUniqueInput
    create: XOR<JoueurCreateWithoutAgrementsInput, JoueurUncheckedCreateWithoutAgrementsInput>
  }

  export type AgrementCreateWithoutJoueursInput = {
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type AgrementUncheckedCreateWithoutJoueursInput = {
    id?: number
    nom: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type AgrementCreateOrConnectWithoutJoueursInput = {
    where: AgrementWhereUniqueInput
    create: XOR<AgrementCreateWithoutJoueursInput, AgrementUncheckedCreateWithoutJoueursInput>
  }

  export type JoueurUpsertWithoutAgrementsInput = {
    update: XOR<JoueurUpdateWithoutAgrementsInput, JoueurUncheckedUpdateWithoutAgrementsInput>
    create: XOR<JoueurCreateWithoutAgrementsInput, JoueurUncheckedCreateWithoutAgrementsInput>
    where?: JoueurWhereInput
  }

  export type JoueurUpdateToOneWithWhereWithoutAgrementsInput = {
    where?: JoueurWhereInput
    data: XOR<JoueurUpdateWithoutAgrementsInput, JoueurUncheckedUpdateWithoutAgrementsInput>
  }

  export type JoueurUpdateWithoutAgrementsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    club?: ClubUpdateOneRequiredWithoutJoueursNestedInput
    roles?: JoueurRoleUpdateManyWithoutJoueurNestedInput
    functions?: JoueurFunctionUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateWithoutAgrementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    club_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    roles?: JoueurRoleUncheckedUpdateManyWithoutJoueurNestedInput
    functions?: JoueurFunctionUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type AgrementUpsertWithoutJoueursInput = {
    update: XOR<AgrementUpdateWithoutJoueursInput, AgrementUncheckedUpdateWithoutJoueursInput>
    create: XOR<AgrementCreateWithoutJoueursInput, AgrementUncheckedCreateWithoutJoueursInput>
    where?: AgrementWhereInput
  }

  export type AgrementUpdateToOneWithWhereWithoutJoueursInput = {
    where?: AgrementWhereInput
    data: XOR<AgrementUpdateWithoutJoueursInput, AgrementUncheckedUpdateWithoutJoueursInput>
  }

  export type AgrementUpdateWithoutJoueursInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgrementUncheckedUpdateWithoutJoueursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurCreateManyClubInput = {
    id?: number
    nom: string
    prenom: string
    licence: string
    email?: string | null
    telephone?: string | null
    date_naissance?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurUpdateWithoutClubInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    roles?: JoueurRoleUpdateManyWithoutJoueurNestedInput
    functions?: JoueurFunctionUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateWithoutClubInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    roles?: JoueurRoleUncheckedUpdateManyWithoutJoueurNestedInput
    functions?: JoueurFunctionUncheckedUpdateManyWithoutJoueurNestedInput
    agrements?: JoueurAgrementUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateManyWithoutClubInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    licence?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    date_naissance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleCreateManyJoueurInput = {
    id?: number
    role_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurFunctionCreateManyJoueurInput = {
    id?: number
    function_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurAgrementCreateManyJoueurInput = {
    id?: number
    agrement_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurRoleUpdateWithoutJoueurInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    role?: RoleUpdateOneRequiredWithoutJoueursNestedInput
  }

  export type JoueurRoleUncheckedUpdateWithoutJoueurInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleUncheckedUpdateManyWithoutJoueurInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionUpdateWithoutJoueurInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    function?: FunctionUpdateOneRequiredWithoutJoueursNestedInput
  }

  export type JoueurFunctionUncheckedUpdateWithoutJoueurInput = {
    id?: IntFieldUpdateOperationsInput | number
    function_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionUncheckedUpdateManyWithoutJoueurInput = {
    id?: IntFieldUpdateOperationsInput | number
    function_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementUpdateWithoutJoueurInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    agrement?: AgrementUpdateOneRequiredWithoutJoueursNestedInput
  }

  export type JoueurAgrementUncheckedUpdateWithoutJoueurInput = {
    id?: IntFieldUpdateOperationsInput | number
    agrement_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementUncheckedUpdateManyWithoutJoueurInput = {
    id?: IntFieldUpdateOperationsInput | number
    agrement_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleCreateManyRoleInput = {
    id?: number
    joueur_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurRoleUpdateWithoutRoleInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueur?: JoueurUpdateOneRequiredWithoutRolesNestedInput
  }

  export type JoueurRoleUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionCreateManyFunctionInput = {
    id?: number
    joueur_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurFunctionUpdateWithoutFunctionInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueur?: JoueurUpdateOneRequiredWithoutFunctionsNestedInput
  }

  export type JoueurFunctionUncheckedUpdateWithoutFunctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurFunctionUncheckedUpdateManyWithoutFunctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementCreateManyAgrementInput = {
    id?: number
    joueur_id: number
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    is_deleted?: boolean
  }

  export type JoueurAgrementUpdateWithoutAgrementInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    joueur?: JoueurUpdateOneRequiredWithoutAgrementsNestedInput
  }

  export type JoueurAgrementUncheckedUpdateWithoutAgrementInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JoueurAgrementUncheckedUpdateManyWithoutAgrementInput = {
    id?: IntFieldUpdateOperationsInput | number
    joueur_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}