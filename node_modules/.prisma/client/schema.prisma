// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle pour les clubs de bridge
model Club {
  id         Int      @id @default(autoincrement())
  nom        String   @unique
  code       String   @unique
  adresse    String?
  telephone  String?
  email      String?
  site_web   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  is_deleted Boolean  @default(false)

  // Relations
  joueurs Joueur[]

  @@map("clubs")
}

// Modèle pour les joueurs
model Joueur {
  id             Int       @id @default(autoincrement())
  nom            String
  prenom         String
  licence        String    @unique
  email          String?
  telephone      String?
  date_naissance DateTime?
  club_id        Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  created_by     String?
  updated_by     String?
  is_deleted     Boolean   @default(false)

  // Relations
  club      Club             @relation(fields: [club_id], references: [id])
  roles     JoueurRole[]
  functions JoueurFunction[]
  agrements JoueurAgrement[]

  @@map("joueurs")
}

// Modèle pour les rôles/fonctions
model Role {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?
  is_deleted  Boolean  @default(false)

  // Relations
  joueurs JoueurRole[]

  @@map("roles")
}

// Modèle pour les fonctions administratives
model Function {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?
  is_deleted  Boolean  @default(false)

  // Relations
  joueurs JoueurFunction[]

  @@map("functions")
}

// Modèle pour les agréments/autorisations
model Agrement {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?
  is_deleted  Boolean  @default(false)

  // Relations
  joueurs JoueurAgrement[]

  @@map("agrements")
}

// Table de jointure Joueur ↔ Role
model JoueurRole {
  id         Int      @id @default(autoincrement())
  joueur_id  Int
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  is_deleted Boolean  @default(false)

  // Relations
  joueur Joueur @relation(fields: [joueur_id], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([joueur_id, role_id])
  @@map("joueur_roles")
}

// Table de jointure Joueur ↔ Function
model JoueurFunction {
  id          Int      @id @default(autoincrement())
  joueur_id   Int
  function_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?
  is_deleted  Boolean  @default(false)

  // Relations
  joueur   Joueur   @relation(fields: [joueur_id], references: [id], onDelete: Cascade)
  function Function @relation(fields: [function_id], references: [id], onDelete: Cascade)

  @@unique([joueur_id, function_id])
  @@map("joueur_functions")
}

// Table de jointure Joueur ↔ Agrement
model JoueurAgrement {
  id          Int      @id @default(autoincrement())
  joueur_id   Int
  agrement_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?
  is_deleted  Boolean  @default(false)

  // Relations
  joueur   Joueur   @relation(fields: [joueur_id], references: [id], onDelete: Cascade)
  agrement Agrement @relation(fields: [agrement_id], references: [id], onDelete: Cascade)

  @@unique([joueur_id, agrement_id])
  @@map("joueur_agrements")
}
